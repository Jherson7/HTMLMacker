/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package gramaticas;

import java_cup.runtime.*;
import java.util.ArrayList;
import interpretes.error;
import Arbol.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/gramaticas/lexico_html.jflex</tt>
 */
public class Lexico_html implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;
  public static final int estado_g = 6;
  public static final int elements = 8;
  public static final int especial = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\24\1\60\1\54\1\54\22\0\1\54\1\0\1\3"+
    "\4\0\1\4\1\37\1\40\1\35\1\34\1\31\1\11\1\2\1\10"+
    "\12\1\1\32\1\33\1\7\1\30\1\41\2\0\1\44\1\45\1\12"+
    "\1\47\1\15\1\43\1\53\1\42\1\23\1\51\1\57\1\21\1\14"+
    "\1\16\1\13\1\27\1\5\1\50\1\26\1\17\1\20\1\55\1\5"+
    "\1\52\1\5\1\46\3\0\1\36\1\6\1\0\1\44\1\45\1\12"+
    "\1\47\1\15\1\43\1\53\1\42\1\23\1\51\1\57\1\21\1\14"+
    "\1\16\1\13\1\27\1\5\1\50\1\26\1\17\1\20\1\55\1\5"+
    "\1\52\1\5\1\46\12\0\1\60\113\0\1\5\37\0\1\5\76\0"+
    "\2\22\115\0\1\25\u1ea8\0\1\60\1\60\u0100\0\1\56\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\0\1\2\1\3\2\2\1\4\1\5"+
    "\1\6\1\7\4\4\1\2\1\4\1\10\1\2\2\4"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\3\4\1\2\1\1\1\23\1\1\1\24"+
    "\1\4\1\2\1\4\1\24\1\25\3\4\1\26\2\0"+
    "\1\27\1\0\1\30\1\31\1\32\2\4\1\33\3\4"+
    "\1\34\4\4\1\0\2\4\1\0\1\4\2\0\3\4"+
    "\1\35\1\0\3\4\1\0\1\1\1\4\2\36\4\4"+
    "\1\3\1\37\1\0\5\4\2\40\4\4\1\0\2\4"+
    "\1\0\1\4\2\0\3\4\2\0\4\4\1\0\1\1"+
    "\1\0\3\4\1\0\3\4\2\41\3\4\1\42\1\0"+
    "\4\4\1\0\2\4\1\0\1\4\2\0\3\4\2\0"+
    "\2\4\1\43\1\0\1\1\1\0\2\4\1\44\1\0"+
    "\5\4\1\45\1\4\1\0\3\4\1\46\1\0\1\4"+
    "\1\47\1\0\1\4\2\0\2\4\1\50\11\0\2\51"+
    "\1\52\1\0\1\1\2\53\1\54\1\0\1\4\1\55"+
    "\1\56\1\4\1\57\1\4\2\60\1\4\1\61\1\4"+
    "\2\62\2\63\2\0\1\4\1\0\1\64\3\0\1\65"+
    "\14\0\1\1\1\0\4\4\1\66\1\67\1\0\1\67"+
    "\4\0\1\70\14\0\1\1\1\0\2\4\1\0\3\4"+
    "\1\0\1\71\2\0\1\72\14\0\2\1\2\73\1\4"+
    "\1\0\3\4\1\74\1\0\1\75\4\0\1\76\1\0"+
    "\1\77\2\0\1\100\1\101\1\102\1\0\2\1\1\4"+
    "\1\0\1\4\1\103\1\104\1\105\1\0\1\106\1\0"+
    "\1\107\1\0\1\110\1\111\2\0\2\1\1\4\1\0"+
    "\1\4\2\0\1\112\1\113\1\0\2\1\1\0\1\4"+
    "\1\0\1\4\2\0\2\1\1\114\1\0\1\114\1\0"+
    "\1\4\2\0\1\114\2\1\1\0\1\115\1\116\1\117"+
    "\1\1\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\365\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\365\0\u0372\0\u03a3\0\u03d4\0\365"+
    "\0\365\0\365\0\365\0\u0405\0\365\0\365\0\365\0\365"+
    "\0\365\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\365\0\u052b"+
    "\0\u04fa\0\u055c\0\u058d\0\u05be\0\365\0\365\0\u05ef\0\u0620"+
    "\0\u0651\0\365\0\u0682\0\u0157\0\365\0\u0188\0\365\0\u06b3"+
    "\0\365\0\u06e4\0\u0715\0\u01b9\0\u0746\0\u0777\0\u07a8\0\u01b9"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\365\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\365\0\u01b9"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0682\0\365\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\365\0\u01b9\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\365\0\u01b9\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u01b9\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u01b9\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u01b9\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u01b9\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u01b9\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\365\0\u01b9\0\u01b9\0\u1e6f"+
    "\0\u1ea0\0\365\0\u01b9\0\u01b9\0\u1ed1\0\u1f02\0\u01b9\0\u01b9"+
    "\0\u1f33\0\u01b9\0\u1f64\0\365\0\u01b9\0\u1f95\0\u01b9\0\u1fc6"+
    "\0\365\0\u01b9\0\365\0\u01b9\0\u1ff7\0\u2028\0\u2059\0\u208a"+
    "\0\365\0\u20bb\0\u20ec\0\u211d\0\365\0\u214e\0\u217f\0\u21b0"+
    "\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338"+
    "\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u01b9"+
    "\0\365\0\u24c0\0\u01b9\0\u24f1\0\u2522\0\u2553\0\u2584\0\365"+
    "\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c"+
    "\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\365\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\365"+
    "\0\u01b9\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\365\0\u2df0"+
    "\0\365\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\365"+
    "\0\u2f47\0\u2f78\0\365\0\365\0\365\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u303c\0\u306d\0\u309e\0\u01b9\0\u01b9\0\365\0\u30cf\0\365"+
    "\0\u3100\0\365\0\u3131\0\365\0\365\0\u3162\0\u3193\0\u31c4"+
    "\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea\0\365\0\365"+
    "\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472"+
    "\0\u34a3\0\u34d4\0\u3505\0\365\0\u3536\0\u01b9\0\u3567\0\u3598"+
    "\0\u35c9\0\u35fa\0\u04fa\0\u362b\0\u365c\0\u368d\0\365\0\365"+
    "\0\365\0\u36be\0\u04fa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\6\1\13"+
    "\1\14\1\15\1\16\1\17\1\12\1\20\1\12\1\21"+
    "\2\12\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\12\1\42\1\12\1\43\2\12\1\44\3\12"+
    "\1\24\1\12\1\6\1\12\1\0\12\6\1\45\11\6"+
    "\1\24\27\6\1\24\3\6\1\0\7\46\1\47\2\46"+
    "\1\50\11\46\1\51\27\46\1\51\4\46\1\6\1\7"+
    "\1\6\1\10\1\11\1\12\4\6\1\52\7\12\1\53"+
    "\1\54\1\55\1\6\2\12\1\30\1\31\1\32\1\33"+
    "\3\6\1\37\1\40\1\56\2\12\1\57\3\12\1\44"+
    "\2\12\1\60\1\55\1\61\1\6\1\12\1\0\1\6"+
    "\1\7\1\6\1\10\1\11\1\12\4\6\1\52\7\12"+
    "\1\53\1\54\1\55\1\6\2\12\1\30\1\31\1\32"+
    "\1\33\3\6\1\37\1\40\1\62\2\12\1\57\3\12"+
    "\1\44\2\12\1\60\1\55\1\61\1\6\1\12\63\0"+
    "\1\7\1\63\56\0\3\64\1\65\55\64\4\66\1\67"+
    "\54\66\1\0\1\12\3\0\2\12\3\0\10\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\11\0\1\70\61\0\1\71\50\0\1\12\3\0"+
    "\2\12\3\0\1\72\1\73\3\12\1\74\1\75\1\12"+
    "\1\0\1\12\2\0\2\12\12\0\1\76\1\12\1\77"+
    "\1\100\3\12\1\101\2\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\10\12\1\0\1\12"+
    "\2\0\1\12\1\102\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\4\12\1\103"+
    "\3\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\3\12\1\104\4\12\1\105\1\106\2\0\2\12\12\0"+
    "\2\12\1\107\7\12\1\0\1\12\1\0\1\12\15\0"+
    "\1\110\45\0\1\12\3\0\2\12\3\0\2\12\1\111"+
    "\5\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\30\0\1\112\14\0\1\113\15\0"+
    "\1\12\3\0\2\12\3\0\10\12\1\0\1\12\2\0"+
    "\1\12\1\114\12\0\2\12\1\115\7\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\10\12"+
    "\1\0\1\12\2\0\2\12\12\0\2\12\1\116\7\12"+
    "\1\0\1\12\1\0\1\12\35\0\1\117\25\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\120\1\121\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\1\12\1\122\6\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\6\12\1\123\1\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\14\0\1\124\45\0\7\46\1\0\60\46"+
    "\1\0\3\46\1\125\45\46\1\0\1\12\3\0\2\12"+
    "\3\0\1\12\1\73\5\12\1\126\1\0\1\12\2\0"+
    "\2\12\12\0\12\12\1\0\1\12\1\0\1\12\50\0"+
    "\1\127\12\0\1\12\3\0\2\12\3\0\10\12\1\0"+
    "\1\12\2\0\2\12\12\0\5\12\1\130\4\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\4\12\1\131\2\12\1\132\1\0\1\12\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\2\0\2\12"+
    "\12\0\6\12\1\133\3\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\10\12\1\0\1\12"+
    "\2\0\2\12\12\0\2\12\1\134\7\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\135\70\0\1\136\50\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\1\0\1\137"+
    "\1\140\1\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\2\12\1\141\5\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\3\12"+
    "\1\142\4\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\2\0\1\12\3\0\2\12"+
    "\3\0\5\12\1\143\2\12\1\0\1\12\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\2\0\2\12"+
    "\12\0\7\12\1\144\2\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\10\12\1\0\1\12"+
    "\1\0\1\145\1\146\1\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\1\147"+
    "\7\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\1\150\6\12\1\151\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\0\1\12\2\0\2\12\12\0"+
    "\10\12\1\152\1\12\1\0\1\12\1\0\1\12\20\0"+
    "\1\153\42\0\1\12\3\0\2\12\3\0\5\12\1\154"+
    "\2\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\10\12\1\0\1\12\2\0\2\12\12\0\3\12\1\155"+
    "\6\12\1\0\1\12\1\0\1\12\45\0\1\156\15\0"+
    "\1\12\3\0\2\12\3\0\10\12\1\0\1\12\2\0"+
    "\2\12\12\0\2\12\1\157\7\12\1\0\1\12\1\0"+
    "\1\12\23\0\2\160\56\0\1\161\40\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\160\1\162\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\7\12\1\163\1\0\1\12\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\4\12\1\164\3\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\17\0\1\165\2\0\1\166\40\0\1\12\3\0\2\12"+
    "\3\0\4\12\1\167\2\12\1\170\1\0\1\12\2\0"+
    "\2\12\12\0\12\12\1\0\1\12\1\0\1\12\2\0"+
    "\1\12\3\0\2\12\3\0\5\12\1\171\2\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\5\12\1\172"+
    "\2\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\15\0\1\173\44\0\7\46\1\0"+
    "\4\46\1\174\44\46\1\0\1\12\3\0\2\12\3\0"+
    "\10\12\1\175\1\176\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\1\177\7\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\2\0\1\12\3\0\2\12"+
    "\3\0\5\12\1\200\2\12\1\201\1\202\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\6\12\1\203\1\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\7\12\1\204\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\26\0\2\205\33\0\1\12\3\0\2\12\3\0"+
    "\10\12\1\0\1\12\1\0\1\205\1\206\1\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\3\12\1\207\4\12\1\0\1\12\2\0"+
    "\2\12\12\0\12\12\1\0\1\12\1\0\1\12\2\0"+
    "\1\12\3\0\2\12\3\0\10\12\1\0\1\12\2\0"+
    "\2\12\12\0\6\12\1\210\3\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\2\12\1\211"+
    "\5\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\10\12\1\0\1\12\2\0\2\12\12\0\2\12\1\212"+
    "\7\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\213\1\214\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\0\1\12\2\0\2\12\12\0"+
    "\2\12\1\215\7\12\1\0\1\12\1\0\1\12\2\0"+
    "\1\12\3\0\2\12\3\0\10\12\1\0\1\12\2\0"+
    "\2\12\12\0\2\12\1\216\7\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\5\12\1\217"+
    "\2\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\21\0\1\220\41\0\1\12\3\0"+
    "\2\12\3\0\6\12\1\221\1\12\1\0\1\12\2\0"+
    "\2\12\12\0\12\12\1\0\1\12\1\0\1\12\2\0"+
    "\1\12\3\0\2\12\3\0\7\12\1\222\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\54\0\1\223\6\0\1\12\3\0\2\12\3\0\10\12"+
    "\1\0\1\12\2\0\2\12\12\0\11\12\1\224\1\0"+
    "\1\12\1\0\1\12\17\0\1\225\61\0\1\226\42\0"+
    "\1\12\3\0\2\12\3\0\4\12\1\227\3\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\5\12\1\230"+
    "\2\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\3\12\1\231\4\12\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\12\0\1\232\55\0"+
    "\1\233\53\0\1\12\3\0\2\12\2\0\1\232\10\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\1\12\1\234\3\0"+
    "\10\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\1\12\1\235\6\12\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\0\1\12\2\0\2\12\12\0"+
    "\2\12\1\236\7\12\1\0\1\12\1\0\1\12\16\0"+
    "\1\237\43\0\7\46\1\0\5\46\1\240\43\46\12\0"+
    "\1\241\47\0\1\12\3\0\2\12\3\0\1\242\7\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\10\12"+
    "\1\0\1\12\2\0\2\12\12\0\1\243\11\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\1\12\1\244\6\12\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\17\0\1\245\43\0"+
    "\1\12\3\0\2\12\3\0\4\12\1\246\3\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\10\12\1\0"+
    "\1\12\2\0\1\12\1\247\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\1\12"+
    "\1\250\6\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\2\0\1\12\3\0\2\12"+
    "\3\0\4\12\1\251\3\12\1\0\1\12\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\2\0\1\12"+
    "\1\252\12\0\12\12\1\0\1\12\1\0\1\12\2\0"+
    "\1\12\3\0\2\12\3\0\7\12\1\253\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\1\12\1\254\3\0\10\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\14\0\1\255\46\0\1\12\3\0\2\12\3\0"+
    "\1\12\1\256\6\12\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\0\1\12\2\0\2\12\12\0"+
    "\3\12\1\257\6\12\1\0\1\12\1\0\1\12\2\0"+
    "\1\12\3\0\2\12\3\0\1\260\7\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\1\12\1\261\6\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\22\0\1\262\40\0\1\12\3\0\2\12"+
    "\3\0\7\12\1\263\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\0\1\12\2\0\2\12\12\0"+
    "\2\12\1\264\7\12\1\0\1\12\1\0\1\12\16\0"+
    "\1\265\44\0\1\12\3\0\2\12\3\0\3\12\1\266"+
    "\4\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\17\0\1\267\55\0\1\270\46\0"+
    "\1\12\3\0\2\12\3\0\4\12\1\271\3\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\1\12\1\272"+
    "\6\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\7\12\1\273\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\13\0\1\274\1\275\1\0"+
    "\1\276\1\0\1\277\2\0\2\300\1\0\2\301\1\302"+
    "\13\0\1\303\1\0\1\304\32\0\1\305\42\0\1\12"+
    "\3\0\2\12\3\0\5\12\1\306\2\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\4\12\1\307\3\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\17\0\1\310\42\0\7\46\1\0\6\46"+
    "\1\311\42\46\56\0\2\312\2\0\1\12\3\0\2\12"+
    "\3\0\10\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\312\1\313\2\0\1\12\3\0\2\12"+
    "\3\0\1\12\1\314\6\12\1\0\1\12\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\16\0\1\315"+
    "\44\0\1\12\3\0\2\12\3\0\3\12\1\316\4\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\1\12"+
    "\1\317\6\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\2\0\1\12\3\0\2\12"+
    "\3\0\10\12\1\0\1\12\2\0\2\12\12\0\6\12"+
    "\1\320\3\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\5\12\1\321\2\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\1\12\1\322\6\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\5\12"+
    "\1\323\2\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\17\0\1\324\43\0\1\12"+
    "\3\0\2\12\3\0\4\12\1\325\3\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\3\12\1\326\4\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\2\0\1\12\3\0\2\12\3\0\3\12"+
    "\1\327\4\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\2\0\1\12\3\0\1\12"+
    "\1\330\3\0\10\12\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\14\0\1\331\46\0"+
    "\1\12\3\0\2\12\3\0\1\12\1\332\6\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\17\0\1\333\43\0\1\12\3\0\2\12\3\0"+
    "\4\12\1\334\3\12\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\16\0\1\335\54\0"+
    "\1\336\50\0\1\12\3\0\2\12\3\0\3\12\1\337"+
    "\4\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\2\0"+
    "\1\336\10\12\1\0\1\12\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\13\0\1\340\4\0\1\341"+
    "\1\342\21\0\1\343\1\0\1\344\1\345\3\0\1\346"+
    "\36\0\1\347\47\0\1\350\57\0\1\351\4\0\2\352"+
    "\20\0\1\353\30\0\1\354\73\0\1\355\75\0\1\356"+
    "\36\0\2\357\50\0\1\360\64\0\1\361\41\0\7\46"+
    "\1\0\7\46\1\362\41\46\44\0\1\363\15\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\2\0\2\12"+
    "\12\0\2\12\1\364\7\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\1\12\1\365\3\0\10\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\3\12\1\366"+
    "\4\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\2\0\1\12\3\0\2\12\3\0"+
    "\10\12\1\0\1\12\2\0\2\12\12\0\4\12\1\367"+
    "\5\12\1\0\1\12\1\0\1\12\2\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\0\1\12\2\0\2\12\12\0"+
    "\2\12\1\370\7\12\1\0\1\12\1\0\1\12\51\0"+
    "\1\371\53\0\1\372\16\0\1\12\3\0\2\12\3\0"+
    "\10\12\1\0\1\12\2\0\2\12\12\0\6\12\1\373"+
    "\3\12\1\0\1\12\1\0\1\12\26\0\2\374\47\0"+
    "\1\375\62\0\1\376\112\0\1\377\34\0\2\u0100\44\0"+
    "\1\u0101\60\0\1\u0102\6\0\1\u0103\111\0\1\u0104\25\0"+
    "\1\u0105\106\0\1\u0106\57\0\1\u0107\36\0\2\u0108\53\0"+
    "\1\u0109\63\0\1\u010a\56\0\1\u010b\47\0\1\u010c\52\0"+
    "\6\46\1\u010d\1\0\51\46\47\0\1\u010e\12\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\2\0\2\12"+
    "\12\0\5\12\1\u010f\4\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\2\12\1\u0110\5\12"+
    "\1\0\1\12\1\0\1\u0111\1\u0112\1\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\2\0\1\12\3\0\2\12"+
    "\3\0\10\12\1\0\1\12\2\0\2\12\12\0\10\12"+
    "\1\u0113\1\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\2\0\2\12"+
    "\12\0\2\12\1\u0114\7\12\1\0\1\12\1\0\1\12"+
    "\23\0\2\u0115\62\0\2\u0116\102\0\1\u0117\24\0\1\u0118"+
    "\110\0\1\u0119\36\0\2\u011a\101\0\1\u011b\60\0\1\u011c"+
    "\33\0\1\u011d\61\0\1\u011e\61\0\1\u011f\112\0\1\u0120"+
    "\23\0\1\u0121\57\0\1\u0122\51\0\1\u0123\65\0\1\u0124"+
    "\61\0\1\u0125\10\0\2\u0111\32\0\7\46\1\0\4\46"+
    "\1\u0126\10\46\2\u0127\32\46\13\0\1\u0128\46\0\1\12"+
    "\3\0\2\12\3\0\1\12\1\u0129\6\12\1\0\1\12"+
    "\2\0\2\12\12\0\12\12\1\0\1\12\1\0\1\12"+
    "\2\0\1\12\3\0\2\12\3\0\6\12\1\u012a\1\12"+
    "\1\0\1\12\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\23\0\2\u012b\36\0\1\12\3\0\2\12"+
    "\3\0\10\12\1\u012b\1\u012c\2\0\2\12\12\0\12\12"+
    "\1\0\1\12\1\0\1\12\2\0\1\12\3\0\2\12"+
    "\3\0\5\12\1\u012d\2\12\1\0\1\12\2\0\2\12"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\2\0\1\12"+
    "\3\0\2\12\3\0\10\12\1\0\1\12\2\0\2\12"+
    "\12\0\5\12\1\u012e\4\12\1\0\1\12\1\0\1\12"+
    "\17\0\1\u012f\71\0\1\u0130\52\0\1\u0131\45\0\1\u0132"+
    "\65\0\1\u0133\112\0\1\u0134\25\0\1\u0135\61\0\1\u0136"+
    "\66\0\1\u0137\103\0\1\u0138\31\0\1\u0139\61\0\1\u013a"+
    "\63\0\1\u013b\56\0\1\u013c\57\0\1\u013d\62\0\1\u013e"+
    "\40\0\7\46\1\0\10\46\1\u013f\47\46\1\0\12\46"+
    "\2\u0140\35\46\1\0\1\12\3\0\2\12\3\0\7\12"+
    "\1\u0141\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\15\0\1\u0142\45\0\1\12\3\0"+
    "\2\12\3\0\2\12\1\u0143\5\12\1\0\1\12\2\0"+
    "\2\12\12\0\12\12\1\0\1\12\1\0\1\12\2\0"+
    "\1\12\3\0\2\12\3\0\1\12\1\u0144\6\12\1\0"+
    "\1\12\2\0\2\12\12\0\12\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\12\3\0\2\12\3\0\1\12\1\u0145"+
    "\6\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\14\0\1\u0146\64\0\1\u0147\57\0"+
    "\1\u0148\57\0\1\u0149\60\0\1\u014a\51\0\1\u014b\65\0"+
    "\1\u014c\63\0\1\u014d\57\0\1\u014e\64\0\1\u014f\37\0"+
    "\7\46\1\0\11\46\1\u0150\46\46\1\0\4\46\1\u0151"+
    "\44\46\1\0\1\12\3\0\2\12\3\0\5\12\1\u0152"+
    "\2\12\1\0\1\12\2\0\2\12\12\0\12\12\1\0"+
    "\1\12\1\0\1\12\30\0\1\u0153\32\0\1\12\3\0"+
    "\2\12\3\0\10\12\1\0\1\12\2\0\1\12\1\u0154"+
    "\12\0\12\12\1\0\1\12\1\0\1\12\16\0\1\u0155"+
    "\111\0\1\u0156\56\0\1\u0157\64\0\1\u0158\27\0\1\u0159"+
    "\41\0\7\46\1\0\7\46\1\u015a\50\46\1\0\17\46"+
    "\1\u015b\31\46\1\0\1\12\3\0\2\12\3\0\10\12"+
    "\1\u015c\1\u015d\2\0\2\12\12\0\12\12\1\0\1\12"+
    "\1\0\1\12\22\0\1\u015e\40\0\1\12\3\0\2\12"+
    "\3\0\7\12\1\u015f\1\0\1\12\2\0\2\12\12\0"+
    "\12\12\1\0\1\12\1\0\1\12\53\0\1\u0160\52\0"+
    "\1\u0161\36\0\2\u015c\35\0\7\46\1\0\12\46\2\u0162"+
    "\44\46\1\0\11\46\1\u0163\37\46\10\u0164\1\0\1\u0165"+
    "\50\u0164\1\u0166\3\u0164\2\u0166\1\u0164\1\0\1\u0165\10\u0166"+
    "\1\u0164\1\u0166\2\u0164\2\u0166\12\u0164\12\u0166\1\u0164\1\u0166"+
    "\1\u0164\1\u0166\1\u0164\15\0\1\u0167\44\0\1\12\3\0"+
    "\2\12\3\0\3\12\1\u0168\4\12\1\0\1\12\2\0"+
    "\2\12\12\0\12\12\1\0\1\12\1\0\1\12\20\0"+
    "\1\u0169\110\0\1\u016a\11\0\7\u016b\1\u0164\1\46\1\u016c"+
    "\47\u016b\7\46\1\0\5\46\1\u016d\43\46\10\0\1\u016e"+
    "\50\0\24\u0164\1\u016f\35\u0164\1\u0166\3\u0164\2\u0166\3\u0164"+
    "\10\u0166\1\u0164\1\u0166\1\u016f\1\u0164\2\u0166\12\u0164\12\u0166"+
    "\1\u0164\1\u0166\1\u0164\1\u0166\1\u0164\13\0\1\u0170\60\0"+
    "\1\u0171\45\0\7\46\1\0\1\u0172\50\46\7\u016b\1\u0164"+
    "\14\u016b\1\u0173\34\u016b\10\0\1\u016f\50\0\7\46\1\0"+
    "\1\u0173\50\46";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14063];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\2\0\1\11\4\1\1\11\10\1\1\11"+
    "\3\1\4\11\1\1\5\11\5\1\1\11\5\1\2\11"+
    "\3\1\1\11\2\0\1\11\1\0\1\11\1\1\1\11"+
    "\13\1\1\0\2\1\1\0\1\1\2\0\3\1\1\11"+
    "\1\0\3\1\1\0\2\1\1\11\6\1\1\11\1\0"+
    "\5\1\1\11\5\1\1\0\2\1\1\0\1\1\2\0"+
    "\3\1\2\0\4\1\1\0\1\1\1\0\3\1\1\0"+
    "\3\1\1\11\5\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\2\0\3\1\2\0\3\1\1\0\1\1\1\0"+
    "\3\1\1\0\7\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\2\0\3\1\11\0\1\11\2\1\1\0\1\1"+
    "\1\11\2\1\1\0\6\1\1\11\4\1\1\11\1\1"+
    "\1\11\1\1\2\0\1\1\1\0\1\11\3\0\1\11"+
    "\14\0\1\1\1\0\5\1\1\11\1\0\1\1\4\0"+
    "\1\11\14\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\11\2\0\1\1\14\0\2\1\1\11\2\1\1\0"+
    "\3\1\1\11\1\0\1\11\4\0\1\1\1\0\1\11"+
    "\2\0\3\11\1\0\3\1\1\0\3\1\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\2\0\3\1\1\0"+
    "\1\1\2\0\2\11\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\11\1\0\1\1\1\0\1\1"+
    "\2\0\3\1\1\0\3\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_html(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico_html(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println(yytext()); return new Symbol(Simbolos_html.cualquier_cosa, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 2: 
          { System.out.println("Error Lexico: "+yytext()+" ["+yyline+" , "+yycolumn+"]");  

												control.agregarError(new error("LEXICO",yytext(),yyline,yycolumn));
          }
        case 81: break;
        case 3: 
          { return new Symbol(Simbolos_html.numero, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 4: 
          { return new Symbol(Simbolos_html.id, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 5: 
          { return new Symbol(Simbolos_html.me, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 6: 
          { return new Symbol(Simbolos_html.dividir, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 7: 
          { return new Symbol(Simbolos_html.menos, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 8: 
          { /* ignore white space. */
          }
        case 87: break;
        case 9: 
          { return new Symbol(Simbolos_html.igual1, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 10: 
          { return new Symbol(Simbolos_html.coma, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 11: 
          { return new Symbol(Simbolos_html.dosp, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 12: 
          { return new Symbol(Simbolos_html.ppt, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 13: 
          { return new Symbol(Simbolos_html.mas, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 14: 
          { return new Symbol(Simbolos_html.por, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 15: 
          { return new Symbol(Simbolos_html.pot, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 16: 
          { return new Symbol(Simbolos_html.apar, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 17: 
          { return new Symbol(Simbolos_html.cpar, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 18: 
          { return new Symbol(Simbolos_html.ma, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 19: 
          { yybegin(YYINITIAL); return new Symbol(Simbolos_html.me, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 20: 
          { /* nada */
          }
        case 99: break;
        case 21: 
          { yybegin(estado_g); return new Symbol(Simbolos_html.ma, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 22: 
          { yybegin(YYINITIAL); return new Symbol(Simbolos_html.ma, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 23: 
          { return new Symbol(Simbolos_html.tstring, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 24: 
          { return new Symbol(Simbolos_html.tchar, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 25: 
          { yybegin(COMENT_SIMPLE);
          }
        case 104: break;
        case 26: 
          { return new Symbol(Simbolos_html.decremento, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 27: 
          { yybegin(elements); return new Symbol(Simbolos_html.ct, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 28: 
          { yybegin(elements); return new Symbol(Simbolos_html.cb, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 29: 
          { return new Symbol(Simbolos_html.aumento, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 30: 
          { return new Symbol(Simbolos_html.t_id, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 31: 
          { yybegin(COMENT_MULTI);
          }
        case 110: break;
        case 32: 
          { return new Symbol(Simbolos_html.cjs, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 33: 
          { return new Symbol(Simbolos_html.css, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 34: 
          { yybegin(especial); System.out.println("caja"); return new Symbol(Simbolos_html.caja, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 35: 
          { return new Symbol(Simbolos_html.ruta, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 36: 
          { return new Symbol(Simbolos_html.alto, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 37: 
          { return new Symbol(Simbolos_html.html, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 38: 
          { yybegin(elements); return new Symbol(Simbolos_html.texto, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 39: 
          { yybegin(especial); return new Symbol(Simbolos_html.tabla, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 40: 
          { yybegin(especial); return new Symbol(Simbolos_html.panel, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 41: 
          { yybegin(especial); return new Symbol(Simbolos_html.filt, yycolumn, yyline, yytext());
          }
        case 120: break;
        case 42: 
          { yybegin(elements); return new Symbol(Simbolos_html.boton, yycolumn, yyline, yytext());
          }
        case 121: break;
        case 43: 
          { return new Symbol(Simbolos_html.click, yycolumn, yyline, yytext());
          }
        case 122: break;
        case 44: 
          { return new Symbol(Simbolos_html.ancho, yycolumn, yyline, yytext());
          }
        case 123: break;
        case 45: 
          { return new Symbol(Simbolos_html.grupo, yycolumn, yyline, yytext());
          }
        case 124: break;
        case 46: 
          { return new Symbol(Simbolos_html.valor, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 47: 
          { yybegin(especial); return new Symbol(Simbolos_html.cuerpo, yycolumn, yyline, yytext());
          }
        case 126: break;
        case 48: 
          { yybegin(elements); return new Symbol(Simbolos_html.opcion, yycolumn, yyline, yytext());
          }
        case 127: break;
        case 49: 
          { yybegin(elements); return new Symbol(Simbolos_html.enlace, yycolumn, yyline, yytext());
          }
        case 128: break;
        case 50: 
          { yybegin(elements); return new Symbol(Simbolos_html.titulo, yycolumn, yyline, yytext());
          }
        case 129: break;
        case 51: 
          { yybegin(elements); return new Symbol(Simbolos_html.imagen, yycolumn, yyline, yytext());
          }
        case 130: break;
        case 52: 
          { return new Symbol(Simbolos_html.fin_ct, yycolumn, yyline, yytext());
          }
        case 131: break;
        case 53: 
          { return new Symbol(Simbolos_html.fin_cb, yycolumn, yyline, yytext());
          }
        case 132: break;
        case 54: 
          { yybegin(elements); return new Symbol(Simbolos_html.texto_a, yycolumn, yyline, yytext());
          }
        case 133: break;
        case 55: 
          { yybegin(especial); return new Symbol(Simbolos_html.spinner, yycolumn, yyline, yytext());
          }
        case 134: break;
        case 56: 
          { return new Symbol(Simbolos_html.fincjs, yycolumn, yyline, yytext());
          }
        case 135: break;
        case 57: 
          { return new Symbol(Simbolos_html.fincss, yycolumn, yyline, yytext());
          }
        case 136: break;
        case 58: 
          { return new Symbol(Simbolos_html.fin_caja, yycolumn, yyline, yytext());
          }
        case 137: break;
        case 59: 
          { return new Symbol(Simbolos_html.alineado, yycolumn, yyline, yytext());
          }
        case 138: break;
        case 60: 
          { return new Symbol(Simbolos_html.salto, yycolumn, yyline, yytext());
          }
        case 139: break;
        case 61: 
          { return new Symbol(Simbolos_html.chtml, yycolumn, yyline, yytext());
          }
        case 140: break;
        case 62: 
          { return new Symbol(Simbolos_html.fin_texto, yycolumn, yyline, yytext());
          }
        case 141: break;
        case 63: 
          { return new Symbol(Simbolos_html.fin_tabla, yycolumn, yyline, yytext());
          }
        case 142: break;
        case 64: 
          { return new Symbol(Simbolos_html.fin_panel, yycolumn, yyline, yytext());
          }
        case 143: break;
        case 65: 
          { return new Symbol(Simbolos_html.fin_filt, yycolumn, yyline, yytext());
          }
        case 144: break;
        case 66: 
          { return new Symbol(Simbolos_html.fin_boton, yycolumn, yyline, yytext());
          }
        case 145: break;
        case 67: 
          { yybegin(elements); return new Symbol(Simbolos_html.cajatexto, yycolumn, yyline, yytext());
          }
        case 146: break;
        case 68: 
          { return new Symbol(Simbolos_html.head, yycolumn, yyline, yytext());
          }
        case 147: break;
        case 69: 
          { return new Symbol(Simbolos_html.fincuerpo, yycolumn, yyline, yytext());
          }
        case 148: break;
        case 70: 
          { return new Symbol(Simbolos_html.fin_opcion, yycolumn, yyline, yytext());
          }
        case 149: break;
        case 71: 
          { return new Symbol(Simbolos_html.fin_enlace, yycolumn, yyline, yytext());
          }
        case 150: break;
        case 72: 
          { return new Symbol(Simbolos_html.fin_titulo, yycolumn, yyline, yytext());
          }
        case 151: break;
        case 73: 
          { return new Symbol(Simbolos_html.fin_imagen, yycolumn, yyline, yytext());
          }
        case 152: break;
        case 74: 
          { return new Symbol(Simbolos_html.fin_texto_a, yycolumn, yyline, yytext());
          }
        case 153: break;
        case 75: 
          { return new Symbol(Simbolos_html.fin_spinner, yycolumn, yyline, yytext());
          }
        case 154: break;
        case 76: 
          { 
          }
        case 155: break;
        case 77: 
          { yybegin(YYINITIAL);
          }
        case 156: break;
        case 78: 
          { return new Symbol(Simbolos_html.fin_cajatexto, yycolumn, yyline, yytext());
          }
        case 157: break;
        case 79: 
          { return new Symbol(Simbolos_html.fin_head, yycolumn, yyline, yytext());
          }
        case 158: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos_html.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
