
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 08 00:47:37 CST 2018
//----------------------------------------------------

package gramaticas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Arbol.*;
import interpretes.error;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 08 00:47:37 CST 2018
  */
public class Sintactico_html extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico_html() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_html(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_html(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\012\000\002\006" +
    "\004\000\002\006\003\000\002\003\011\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\007\011\000\002\010" +
    "\011\000\002\024\011\000\002\004\011\000\002\030\004" +
    "\000\002\030\003\000\002\030\004\000\002\014\004\000" +
    "\002\014\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\013\006\000\002\015\006\000\002\016\006\000" +
    "\002\017\006\000\002\020\006\000\002\021\006\000\002" +
    "\022\006\000\002\023\006\000\002\025\004\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\027\011\000\002\031\011\000\002\032\011\000\002\035" +
    "\011\000\002\036\011\000\002\037\011\000\002\040\011" +
    "\000\002\041\004\000\002\041\003\000\002\042\011\000" +
    "\002\043\011\000\002\044\005\000\002\045\011\000\002" +
    "\046\004\000\002\046\003\000\002\050\011\000\002\047" +
    "\004\000\002\047\004\000\002\047\003\000\002\047\003" +
    "\000\002\047\004\000\002\047\004\000\002\034\011\000" +
    "\002\033\011\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\004\000\002\052\011\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\004\000\002\051\004\000" +
    "\002\051\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\011\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\010\001\002\000\004\011\011\001\002\000" +
    "\004\006\020\001\002\000\004\011\ufffe\001\002\000\004" +
    "\011\015\001\002\000\004\011\u0101\001\002\000\006\006" +
    "\020\046\017\001\002\000\004\011\uffff\001\002\000\004" +
    "\010\113\001\002\000\004\010\021\001\002\000\006\003" +
    "\024\011\026\001\002\000\004\011\ufff7\001\002\000\004" +
    "\011\ufff9\001\002\000\004\011\026\001\002\000\004\011" +
    "\ufff8\001\002\000\010\050\036\052\035\053\034\001\002" +
    "\000\004\011\033\001\002\000\004\011\ufffa\001\002\000" +
    "\004\011\ufffc\001\002\000\004\011\ufffb\001\002\000\012" +
    "\007\037\050\036\052\035\053\034\001\002\000\004\010" +
    "\103\001\002\000\004\040\042\001\002\000\004\040\042" +
    "\001\002\000\004\010\040\001\002\000\004\011\ufffd\001" +
    "\002\000\004\010\072\001\002\000\004\067\043\001\002" +
    "\000\014\102\044\104\045\105\046\106\051\107\052\001" +
    "\002\000\014\102\044\104\045\105\046\106\051\107\052" +
    "\001\002\000\026\011\uff9c\072\uff9c\073\uff9c\074\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\103\uff9c\001\002" +
    "\000\026\011\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076" +
    "\uff9b\077\uff9b\100\uff9b\101\uff9b\103\uff9b\001\002\000\026" +
    "\011\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\103\uff9d\001\002\000\022\072\054" +
    "\073\057\074\060\075\053\076\055\077\061\100\056\101" +
    "\062\001\002\000\026\011\uff9a\072\uff9a\073\uff9a\074\uff9a" +
    "\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\103\uff9a\001" +
    "\002\000\026\011\uff99\072\uff99\073\uff99\074\uff99\075\uff99" +
    "\076\uff99\077\uff99\100\uff99\101\uff99\103\uff99\001\002\000" +
    "\014\102\044\104\045\105\046\106\051\107\052\001\002" +
    "\000\026\003\uffe0\010\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\001\002\000\014" +
    "\102\044\104\045\105\046\106\051\107\052\001\002\000" +
    "\026\011\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\103\uff9f\001\002\000\014\102" +
    "\044\104\045\105\046\106\051\107\052\001\002\000\014" +
    "\102\044\104\045\105\046\106\051\107\052\001\002\000" +
    "\014\102\044\104\045\105\046\106\051\107\052\001\002" +
    "\000\026\011\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\103\uff9e\001\002\000\026" +
    "\011\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\056\101\062\103\uffa1\001\002\000\026\011\uffa4" +
    "\072\uffa4\073\uffa4\074\uffa4\075\053\076\055\077\061\100" +
    "\056\101\062\103\uffa4\001\002\000\026\011\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\053\076\055\077\061\100\056\101" +
    "\062\103\uffa0\001\002\000\026\011\uffa2\072\uffa2\073\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\077\061\100\056\101\062\103" +
    "\uffa2\001\002\000\026\011\uffa3\072\uffa3\073\uffa3\074\uffa3" +
    "\075\uffa3\076\uffa3\077\061\100\056\101\062\103\uffa3\001" +
    "\002\000\022\073\057\074\060\075\053\076\055\077\061" +
    "\100\056\101\062\103\071\001\002\000\026\011\uff98\072" +
    "\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98" +
    "\101\uff98\103\uff98\001\002\000\004\011\073\001\002\000" +
    "\004\051\074\001\002\000\004\010\075\001\002\000\004" +
    "\011\ufff2\001\002\000\004\010\077\001\002\000\004\011" +
    "\100\001\002\000\004\012\101\001\002\000\004\010\102" +
    "\001\002\000\004\011\ufff3\001\002\000\004\110\104\001" +
    "\002\000\004\011\105\001\002\000\004\054\106\001\002" +
    "\000\004\010\107\001\002\000\004\011\ufff1\001\002\000" +
    "\004\011\ufff6\001\002\000\004\011\ufff4\001\002\000\004" +
    "\011\ufff5\001\002\000\006\003\126\011\125\001\002\000" +
    "\006\003\uffd4\011\uffd4\001\002\000\006\003\126\011\376" +
    "\001\002\000\006\003\uffcd\011\uffcd\001\002\000\006\003" +
    "\uffcf\011\uffcf\001\002\000\006\003\uffd6\011\uffd6\001\002" +
    "\000\006\003\uffd2\011\uffd2\001\002\000\006\003\uffd3\011" +
    "\uffd3\001\002\000\006\003\uffd1\011\uffd1\001\002\000\006" +
    "\003\uffd8\011\uffd8\001\002\000\030\013\151\023\150\025" +
    "\147\027\152\033\156\035\160\055\146\057\154\061\157" +
    "\063\153\065\155\001\002\000\004\011\125\001\002\000" +
    "\006\003\uffd7\011\uffd7\001\002\000\006\003\uffd0\011\uffd0" +
    "\001\002\000\006\003\uffce\011\uffce\001\002\000\006\003" +
    "\uffd5\011\uffd5\001\002\000\006\003\uffc9\011\uffc9\001\002" +
    "\000\006\003\uffc2\011\uffc2\001\002\000\006\003\uffc4\011" +
    "\uffc4\001\002\000\006\003\uffcb\011\uffcb\001\002\000\006" +
    "\003\uffc7\011\uffc7\001\002\000\006\003\uffc8\011\uffc8\001" +
    "\002\000\006\003\uffc6\011\uffc6\001\002\000\006\003\uffcc" +
    "\011\uffcc\001\002\000\006\003\uffc5\011\uffc5\001\002\000" +
    "\006\003\uffc3\011\uffc3\001\002\000\006\003\uffca\011\uffca" +
    "\001\002\000\026\003\202\010\164\036\170\037\200\040" +
    "\042\041\172\042\162\043\163\044\166\045\174\001\002" +
    "\000\026\003\202\010\164\036\170\037\200\040\042\041" +
    "\172\042\162\043\163\044\166\045\174\001\002\000\026" +
    "\003\202\010\164\036\170\037\200\040\042\041\172\042" +
    "\162\043\163\044\166\045\174\001\002\000\026\003\202" +
    "\010\164\036\170\037\200\040\042\041\172\042\162\043" +
    "\163\044\166\045\174\001\002\000\026\003\202\010\164" +
    "\036\170\037\200\040\042\041\172\042\162\043\163\044" +
    "\166\045\174\001\002\000\026\003\202\010\164\036\170" +
    "\037\200\040\042\041\172\042\162\043\163\044\166\045" +
    "\174\001\002\000\026\003\202\010\164\036\170\037\200" +
    "\040\042\041\172\042\162\043\163\044\166\045\174\001" +
    "\002\000\026\003\202\010\164\036\170\037\200\040\042" +
    "\041\172\042\162\043\163\044\166\045\174\001\002\000" +
    "\026\003\202\010\164\036\170\037\200\040\042\041\172" +
    "\042\162\043\163\044\166\045\174\001\002\000\026\003" +
    "\202\010\164\036\170\037\200\040\042\041\172\042\162" +
    "\043\163\044\166\045\174\001\002\000\004\010\161\001" +
    "\002\000\006\003\uffb6\011\uffb6\001\002\000\004\067\241" +
    "\001\002\000\004\067\236\001\002\000\022\003\uffee\011" +
    "\uffee\102\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee" +
    "\001\002\000\026\003\uffea\010\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\001\002" +
    "\000\004\067\233\001\002\000\026\003\uffe8\010\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\001\002\000\004\067\230\001\002\000\026\003" +
    "\214\010\226\036\170\037\200\040\042\041\172\042\162" +
    "\043\163\044\166\045\174\001\002\000\004\067\223\001" +
    "\002\000\026\003\uffe9\010\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\001\002\000" +
    "\004\067\220\001\002\000\026\003\uffe7\010\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\001\002\000\026\003\uffe5\010\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\001" +
    "\002\000\026\003\uffe6\010\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\001\002\000" +
    "\004\067\215\001\002\000\026\003\uffeb\010\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\001\002\000\026\003\214\010\212\036\170\037\200" +
    "\040\042\041\172\042\162\043\163\044\166\045\174\001" +
    "\002\000\026\003\uffe4\010\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\001\002\000" +
    "\004\110\206\001\002\000\026\003\uffe3\010\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\001\002\000\004\011\207\001\002\000\004\062\210" +
    "\001\002\000\004\010\211\001\002\000\006\003\uffa5\011" +
    "\uffa5\001\002\000\022\003\uffed\011\uffed\102\uffed\104\uffed" +
    "\105\uffed\106\uffed\107\uffed\110\uffed\001\002\000\026\003" +
    "\uffe2\010\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\001\002\000\024\003\214\036" +
    "\170\037\200\040\042\041\172\042\162\043\163\044\166" +
    "\045\174\001\002\000\014\102\044\104\045\105\046\106" +
    "\051\107\052\001\002\000\022\072\217\073\057\074\060" +
    "\075\053\076\055\077\061\100\056\101\062\001\002\000" +
    "\026\003\uffe1\010\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002\000\014\102" +
    "\044\104\045\105\046\106\051\107\052\001\002\000\022" +
    "\072\222\073\057\074\060\075\053\076\055\077\061\100" +
    "\056\101\062\001\002\000\026\003\uffdb\010\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\001\002\000\014\102\044\104\045\105\046\106\051" +
    "\107\052\001\002\000\022\072\225\073\057\074\060\075" +
    "\053\076\055\077\061\100\056\101\062\001\002\000\026" +
    "\003\uffdf\010\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\001\002\000\022\003\uffef" +
    "\011\uffef\102\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110" +
    "\uffef\001\002\000\026\003\uffec\010\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\001" +
    "\002\000\014\102\044\104\045\105\046\106\051\107\052" +
    "\001\002\000\022\072\232\073\057\074\060\075\053\076" +
    "\055\077\061\100\056\101\062\001\002\000\026\003\uffda" +
    "\010\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\001\002\000\014\102\044\104\045" +
    "\105\046\106\051\107\052\001\002\000\022\072\235\073" +
    "\057\074\060\075\053\076\055\077\061\100\056\101\062" +
    "\001\002\000\026\003\uffdd\010\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\001\002" +
    "\000\014\102\044\104\045\105\046\106\051\107\052\001" +
    "\002\000\022\072\240\073\057\074\060\075\053\076\055" +
    "\077\061\100\056\101\062\001\002\000\026\003\uffdc\010" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\001\002\000\014\102\044\104\045\105" +
    "\046\106\051\107\052\001\002\000\022\072\243\073\057" +
    "\074\060\075\053\076\055\077\061\100\056\101\062\001" +
    "\002\000\026\003\uffde\010\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\001\002\000" +
    "\014\102\044\104\045\105\046\106\051\107\052\001\002" +
    "\000\022\011\246\073\057\074\060\075\053\076\055\077" +
    "\061\100\056\101\062\001\002\000\004\034\247\001\002" +
    "\000\004\010\250\001\002\000\006\003\uffb7\011\uffb7\001" +
    "\002\000\004\110\252\001\002\000\004\011\253\001\002" +
    "\000\004\066\254\001\002\000\004\010\255\001\002\000" +
    "\006\003\uffbd\011\uffbd\001\002\000\004\110\257\001\002" +
    "\000\004\011\260\001\002\000\004\060\261\001\002\000" +
    "\004\010\262\001\002\000\006\003\uffc0\011\uffc0\001\002" +
    "\000\004\110\264\001\002\000\004\011\265\001\002\000" +
    "\004\064\266\001\002\000\004\010\267\001\002\000\006" +
    "\003\uffbe\011\uffbe\001\002\000\004\011\272\001\002\000" +
    "\004\011\uffb9\001\002\000\004\031\276\001\002\000\004" +
    "\011\275\001\002\000\004\011\uffba\001\002\000\006\030" +
    "\277\031\276\001\002\000\026\003\202\010\164\036\170" +
    "\037\200\040\042\041\172\042\162\043\163\044\166\045" +
    "\174\001\002\000\004\010\300\001\002\000\006\003\uffbb" +
    "\011\uffbb\001\002\000\004\110\302\001\002\000\004\011" +
    "\303\001\002\000\004\032\304\001\002\000\004\010\305" +
    "\001\002\000\004\011\uffb8\001\002\000\004\011\310\001" +
    "\002\000\004\011\uffb3\001\002\000\004\015\314\001\002" +
    "\000\004\011\313\001\002\000\004\011\uffb4\001\002\000" +
    "\006\014\315\015\314\001\002\000\026\003\202\010\164" +
    "\036\170\037\200\040\042\041\172\042\162\043\163\044" +
    "\166\045\174\001\002\000\004\010\316\001\002\000\006" +
    "\003\uffb5\011\uffb5\001\002\000\006\003\322\011\324\001" +
    "\002\000\004\011\uffae\001\002\000\004\011\353\001\002" +
    "\000\004\011\324\001\002\000\004\011\uffaf\001\002\000" +
    "\006\017\325\021\326\001\002\000\026\003\202\010\164" +
    "\036\170\037\200\040\042\041\172\042\162\043\163\044" +
    "\166\045\174\001\002\000\026\003\202\010\164\036\170" +
    "\037\200\040\042\041\172\042\162\043\163\044\166\045" +
    "\174\001\002\000\010\003\332\011\335\110\330\001\002" +
    "\000\004\011\uffa7\001\002\000\004\011\uffa9\001\002\000" +
    "\010\003\332\011\335\110\330\001\002\000\004\011\uffa8" +
    "\001\002\000\004\011\336\001\002\000\006\061\157\063" +
    "\153\001\002\000\004\022\337\001\002\000\004\010\340" +
    "\001\002\000\004\011\uffaa\001\002\000\004\011\uffa6\001" +
    "\002\000\010\003\332\011\335\110\330\001\002\000\004" +
    "\011\344\001\002\000\004\020\345\001\002\000\004\010" +
    "\346\001\002\000\004\011\uffab\001\002\000\004\011\uffac" +
    "\001\002\000\004\011\uffad\001\002\000\004\011\uffb1\001" +
    "\002\000\004\011\uffb0\001\002\000\010\016\354\017\325" +
    "\021\326\001\002\000\004\010\355\001\002\000\004\011" +
    "\uffb2\001\002\000\004\110\357\001\002\000\004\011\360" +
    "\001\002\000\004\024\361\001\002\000\004\010\362\001" +
    "\002\000\006\003\uffbc\011\uffbc\001\002\000\004\110\364" +
    "\001\002\000\004\011\365\001\002\000\004\026\366\001" +
    "\002\000\004\010\367\001\002\000\006\003\uffbf\011\uffbf" +
    "\001\002\000\006\003\126\011\125\001\002\000\006\003" +
    "\126\011\373\001\002\000\006\003\uffd9\011\uffd9\001\002" +
    "\000\032\013\151\023\150\025\147\027\152\033\156\035" +
    "\160\055\146\056\374\057\154\061\157\063\153\065\155" +
    "\001\002\000\004\010\375\001\002\000\006\003\uffc1\011" +
    "\uffc1\001\002\000\032\013\151\023\150\025\147\027\152" +
    "\033\156\035\160\047\377\055\146\057\154\061\157\063" +
    "\153\065\155\001\002\000\004\010\u0100\001\002\000\004" +
    "\011\ufff0\001\002\000\004\005\u0102\001\002\000\004\010" +
    "\u0103\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\006\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\015\004\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\022\010\024\011\026\024\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\107\010\111\024\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\030\010\031\024\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\075\001\001\000" +
    "\004\015\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\046\051" +
    "\047\001\001\000\006\005\046\051\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\046" +
    "\051\066\001\001\000\002\001\001\000\006\005\046\051" +
    "\065\001\001\000\002\001\001\000\006\005\046\051\064" +
    "\001\001\000\006\005\046\051\063\001\001\000\006\005" +
    "\046\051\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\025\114\026\123\027\126\031\117\032\131" +
    "\035\113\036\121\037\116\040\115\043\120\044\122\045" +
    "\127\052\130\001\001\000\002\001\001\000\032\026\371" +
    "\027\126\031\117\032\131\035\113\036\121\037\116\040" +
    "\115\043\120\044\122\045\127\052\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\027\141\031\135\032\144\035" +
    "\132\036\137\037\134\040\133\043\136\044\140\045\142" +
    "\052\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\367\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\362\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\355\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\305\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\267\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\262\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\255\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\250\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\243\001\001\000" +
    "\030\012\200\013\164\014\170\015\172\016\166\017\174" +
    "\020\176\021\175\022\202\023\204\030\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\012\226" +
    "\013\164\015\172\016\166\017\174\020\176\021\175\022" +
    "\202\023\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\212\013\164\015\172\016\166\017\174\020\176\021" +
    "\175\022\202\023\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\212\013\164\015\172\016" +
    "\166\017\174\020\176\021\175\022\202\023\204\001\001" +
    "\000\006\005\046\051\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\046\051\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\046\051\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\046\051\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\046\051\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\046\051\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\046\051\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\046\051\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\272" +
    "\042\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\200\013\164\014\170\015\172\016\166\017" +
    "\174\020\176\021\175\022\202\023\204\030\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\310\050\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\200\013\164\014" +
    "\170\015\172\016\166\017\174\020\176\021\175\022\202" +
    "\023\204\030\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\322\034\317\047\320\001\001\000\002" +
    "\001\001\000\006\033\351\034\350\001\001\000\006\033" +
    "\347\034\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\200\013\164\014\170\015\172\016\166\017" +
    "\174\020\176\021\175\022\202\023\204\030\341\001\001" +
    "\000\030\012\200\013\164\014\170\015\172\016\166\017" +
    "\174\020\176\021\175\022\202\023\204\030\326\001\001" +
    "\000\010\035\330\052\332\053\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\035\330\052\332\053\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\330\052\332\053\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\025\370\026\123" +
    "\027\126\031\117\032\131\035\113\036\121\037\116\040" +
    "\115\043\120\044\122\045\127\052\130\001\001\000\032" +
    "\026\371\027\126\031\117\032\131\035\113\036\121\037" +
    "\116\040\115\043\120\044\122\045\127\052\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_html$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_html$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_html$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public nodo raiz;
    //** Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);
        control.agregarError(new error("SINTACTICO","lexema: " +s.value,s.left,s.right));
        //ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        //archivoA.lista_errores.add(denegado);
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);
        control.agregarError(new error("SINTACTICO","lexema: " +s.value,s.left,s.right));
       // ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        //archivoA.lista_errores.add(denegado);
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico_html$actions {



    
   // public ArrayList<Token> lista_reservadasB = new ArrayList<>();
   // public void guardarReservada(String valor, int linea, int columna, String descripcion)
   // {
    //    lista_reservadasB.add(new Token(valor, linea, columna, descripcion));
  // }

  private final Sintactico_html parser;

  /** Constructor */
  CUP$Sintactico_html$actions(Sintactico_html parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico_html$do_action(
    int                        CUP$Sintactico_html$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_html$parser,
    java.util.Stack            CUP$Sintactico_html$stack,
    int                        CUP$Sintactico_html$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_html$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_html$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // F ::= apar E cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // F ::= id 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("ID",a,aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // F ::= tchar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("CHAR",a.replaceAll("'",""),aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // F ::= tstring 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT =  new nodo("STRING",a.replaceAll("\"",""),aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // F ::= numero 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("NUM",a,aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= F 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= E decremento 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("--",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= E aumento 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("++",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= E mas E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("+",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= E pot E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("pot",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E dividir E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("/",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E por E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("*",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= E menos E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("-",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IMAGEN ::= me imagen FIN cualquier_cosa me fin_imagen ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		nodo texto = new nodo("IMAGEN",b,bleft,bright); texto.add(a); RESULT = texto;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("IMAGEN",40, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO_TABLA ::= error CONTENIDO_TABLA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_TABLA",41, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_TABLA ::= cualquier_cosa 
            {
              nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("CQ",b,bleft,bright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_TABLA",41, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_TABLA ::= IMAGEN 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_TABLA",41, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_TABLA ::= BOTON 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_TABLA",41, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CT ::= me ct FIN CONTENIDO_TABLA me fin_ct ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT = new nodo("CT",a,b); 
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CT",25, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CB ::= me cb FIN CONTENIDO_TABLA me fin_cb ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT= new nodo("CB",a,b); 
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CB",26, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_TABLE ::= error CB 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("LISTA_CB",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLE",37, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_TABLE ::= error CT 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("LISTA_CT",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLE",37, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_TABLE ::= CB 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("LISTA_CB",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLE",37, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_TABLE ::= CT 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("LISTA_CT",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLE",37, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_TABLE ::= LISTA_TABLE CT 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLE",37, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_TABLE ::= LISTA_TABLE CB 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLE",37, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FILA ::= me filt FIN LISTA_TABLE me fin_filt ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT= new nodo("FILA",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("FILA",38, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_TABLA ::= FILA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("LISTA_FILAS",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLA",36, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_TABLA ::= LISTA_TABLA FILA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_TABLA",36, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TABLA ::= me tabla FIN LISTA_TABLA me fin_tabla ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT = new nodo("TABLA",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("TABLA",35, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BR ::= me salto ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("SALTO",aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("BR",34, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SPINNER ::= me spinner FIN E me fin_spinner ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT = new nodo("SPINNER",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SPINNER",33, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPCION ::= me opcion FIN cualquier_cosa me fin_opcion ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		nodo texto = new nodo("OPCION",b,bleft,bright); texto.add(a); RESULT = texto;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("OPCION",32, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA_OPCIONES ::= OPCION 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("OPCIONES",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONES",31, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_OPCIONES ::= LISTA_OPCIONES OPCION 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONES",31, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CAJA ::= me caja FIN LISTA_OPCIONES me fin_caja ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo z = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT = new nodo("CAJA",a,z);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CAJA",30, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TEXTO_AREA ::= me texto_a FIN cualquier_cosa me fin_texto_a ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		nodo texto = new nodo("TEXTO_AREA",b,bleft,bright); texto.add(a); RESULT = texto;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("TEXTO_AREA",29, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENLANCE ::= me enlace FIN cualquier_cosa me fin_enlace ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		nodo texto = new nodo("ENLANCE",b,bleft,bright); texto.add(a); RESULT = texto;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ENLANCE",28, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOTON ::= me boton FIN cualquier_cosa me fin_boton ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		nodo texto = new nodo("BOTON",b,bleft,bright); texto.add(a); RESULT = texto;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("BOTON",27, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CAJA_TEXTO ::= me cajatexto FIN cualquier_cosa me fin_cajatexto ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		nodo texto = new nodo("CAJA_TEXTO",b,bleft,bright); texto.add(a); RESULT = texto;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TEXTO ::= me texto FIN cualquier_cosa me fin_texto ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		 nodo texto = new nodo("TEXTO",b,bleft,bright); texto.add(a); RESULT = texto;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PANEL ::= me panel FIN SENTENCIAS me fin_panel ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT = new nodo("PANEL",a,b);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("PANEL",21, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA ::= error CAJA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA ::= error IMAGEN 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA ::= error TEXTO_AREA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA ::= error TABLA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= error BR 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= error SPINNER 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= error ENLANCE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= error BOTON 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= error CAJA_TEXTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= error TEXTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= error PANEL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= CAJA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= IMAGEN 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= TEXTO_AREA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= TABLA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= BR 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= SPINNER 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= ENLANCE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= BOTON 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= CAJA_TEXTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= TEXTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= PANEL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS ::= SENTENCIA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("SENTENCIAS",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= valor igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("VALOR",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("VALOR",17, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ALIN ::= alineado igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("ALINEADO",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ALIN",16, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ANCHO ::= ancho igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("ANCHO",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ANCHO",15, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ALTO ::= alto igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("ALTO",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ALTO",14, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GRUPO ::= grupo igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("GRUPO",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("GRUPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IDEN ::= t_id igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("IDEN",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("IDEN",12, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RUTA ::= ruta igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("RUTA",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("RUTA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CLICK ::= click igual1 E ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = new nodo("CLICK",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CLICK",9, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUTOS ::= error ATRIBUTOS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIBUTOS ::= VALOR 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIBUTOS ::= ALIN 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIBUTOS ::= ANCHO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTOS ::= ALTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIBUTOS ::= GRUPO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUTOS ::= IDEN 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIBUTOS ::= RUTA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIBUTOS ::= CLICK 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L_ATRIBUTOS ::= ATRIBUTOS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("ATRIBUTOS",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",10, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L_ATRIBUTOS ::= L_ATRIBUTOS ATRIBUTOS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",10, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FIN ::= error ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("FIN",aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("FIN",22, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FIN ::= ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("FIN",aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("FIN",22, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FIN ::= L_ATRIBUTOS ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT= new nodo("FIN",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("FIN",22, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BODY ::= me cuerpo ma SENTENCIAS me fincuerpo ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT = new nodo("CUERPO",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("BODY",2, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TITULO ::= me titulo ma cualquier_cosa me fin_titulo ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT = new nodo("TITULO",a,aleft,aright);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("TITULO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CJS ::= me cjs RUTA ma me fincjs ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		RESULT = new nodo("CJS",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CJS",6, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CSS ::= me css RUTA ma me fincss ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		RESULT = new nodo("CSS",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CSS",5, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_HEAD ::= error TITULO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("CONTENIDO_HEAD",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO_HEAD ::= error CJS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("CONTENIDO_HEAD",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO_HEAD ::= error CSS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("CONTENIDO_HEAD",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO_HEAD ::= TITULO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("CONTENIDO_HEAD",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO_HEAD ::= CJS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("CONTENIDO_HEAD",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO_HEAD ::= CSS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("CONTENIDO_HEAD",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO_HEAD ::= CONTENIDO_HEAD TITULO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO_HEAD ::= CONTENIDO_HEAD CJS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDO_HEAD ::= CONTENIDO_HEAD CSS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("CONTENIDO_HEAD",7, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HEAD ::= me head ma CONTENIDO_HEAD me fin_head ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		RESULT=b; 
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("HEAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_HEAD ::= HEAD 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		RESULT= new nodo("LISTA_HEAD",a);
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("L_HEAD",4, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_HEAD ::= L_HEAD HEAD 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.peek()).value;
		a.hijos.addLast(b); RESULT=a;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("L_HEAD",4, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= me html ma L_HEAD BODY me chtml ma 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-3)).value;
		nodo raizz= new nodo("HTML",a,b);  parser.raiz=raizz;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          return CUP$Sintactico_html$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).right;
		nodo start_val = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_html$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.elementAt(CUP$Sintactico_html$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_html$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_html$parser.done_parsing();
          return CUP$Sintactico_html$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

