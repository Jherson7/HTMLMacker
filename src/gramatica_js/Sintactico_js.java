
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 08 00:47:43 CST 2018
//----------------------------------------------------

package gramatica_js;

import java_cup.runtime.Symbol;
import Arbol.*;
import interpretes.error;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 08 00:47:43 CST 2018
  */
public class Sintactico_js extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico_js() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_js(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_js(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\005" +
    "\000\002\015\005\000\002\011\004\000\002\012\006\000" +
    "\002\013\005\000\002\020\010\000\002\017\007\000\002" +
    "\007\005\000\002\007\003\000\002\021\011\000\002\021" +
    "\012\000\002\022\006\000\002\023\011\000\002\023\012" +
    "\000\002\025\004\000\002\025\003\000\002\024\006\000" +
    "\002\026\005\000\002\010\003\000\002\010\003\000\002" +
    "\027\015\000\002\030\011\000\002\031\006\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\007\000\002\016\005\000\002\034\012\000" +
    "\002\034\011\000\002\035\005\000\002\035\003\000\002" +
    "\036\006\000\002\041\004\000\002\041\003\000\002\037" +
    "\005\000\002\037\003\000\002\040\006\000\002\040\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\004\000" +
    "\002\006\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\006\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\054\007\004\010\025\012\027\013\035\014" +
    "\053\017\034\020\052\021\021\022\005\023\041\024\010" +
    "\025\037\033\033\041\056\043\006\056\047\062\031\063" +
    "\036\064\045\065\044\066\055\001\002\000\004\065\307" +
    "\001\002\000\004\006\306\001\002\000\032\017\034\020" +
    "\052\023\041\033\033\041\056\043\006\047\062\062\031" +
    "\063\036\064\045\065\064\066\055\001\002\000\004\006" +
    "\300\001\002\000\004\041\275\001\002\000\004\006\274" +
    "\001\002\000\004\006\273\001\002\000\004\006\272\001" +
    "\002\000\064\002\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\033\uffd8\041\uffd8\043\uffd8" +
    "\044\uffd8\056\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\001\002\000\064\002\ufff3\007\ufff3\010\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\033\ufff3\041\ufff3" +
    "\043\ufff3\044\ufff3\056\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\064\002\uffd7\007\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\033\uffd7" +
    "\041\uffd7\043\uffd7\044\uffd7\056\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\001\002\000\056\002\000\007\004" +
    "\010\025\012\027\013\035\014\053\017\034\020\052\021" +
    "\021\022\005\023\041\024\010\025\037\033\033\041\056" +
    "\043\006\056\047\062\031\063\036\064\045\065\044\066" +
    "\055\001\002\000\064\002\ufffe\007\ufffe\010\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\033\ufffe\041\ufffe" +
    "\043\ufffe\044\ufffe\056\ufffe\062\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\001\002\000\004\006\271\001\002\000\064" +
    "\002\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\033\uffd6\041\uffd6\043\uffd6\044\uffd6\056" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002" +
    "\000\052\004\uffb3\005\uffb3\006\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\042\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\001\002\000\020\032\112\033\113\034\107" +
    "\035\110\036\114\037\265\040\266\001\002\000\004\041" +
    "\252\001\002\000\004\006\251\001\002\000\004\041\243" +
    "\001\002\000\022\006\242\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\001\002\000\052\004\uffb2" +
    "\005\uffb2\006\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\042\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\001" +
    "\002\000\022\006\241\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\001\002\000\026\017\034\020" +
    "\052\033\033\041\056\043\006\062\031\063\036\064\045" +
    "\065\064\066\055\001\002\000\052\004\uffac\005\uffac\006" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\042\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\001\002\000\004" +
    "\041\223\001\002\000\052\004\uffb1\005\uffb1\006\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\042\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\001\002\000\004\041\220" +
    "\001\002\000\004\006\217\001\002\000\004\065\201\001" +
    "\002\000\064\002\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\033\ufff5\041\ufff5\043\ufff5" +
    "\044\ufff5\056\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\001\002\000\052\004\uffaa\005\uffaa\006\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\001\002\000\030\005\172\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\067\043\173\060\071\001\002\000\052\004\uffaf\005" +
    "\uffaf\006\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002" +
    "\000\064\002\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\033\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\056\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\001\002\000\034\006\uffcc\017\034\020\052\023\041\033" +
    "\033\041\056\043\006\047\062\062\031\063\036\064\045" +
    "\065\064\066\055\001\002\000\004\006\170\001\002\000" +
    "\004\002\167\001\002\000\052\004\uffab\005\uffab\006\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\042\uffab\044\uffab\045\uffab\046\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\001\002\000\004\041" +
    "\145\001\002\000\004\006\144\001\002\000\052\004\uffb0" +
    "\005\uffb0\006\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\001" +
    "\002\000\032\017\034\020\052\023\041\033\033\041\056" +
    "\043\006\047\062\062\031\063\036\064\045\065\064\066" +
    "\055\001\002\000\052\004\uffa8\005\uffa8\006\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\042" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\001\002\000\032\004\uffc4\006" +
    "\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\050\130\051\131" +
    "\052\133\053\132\054\135\055\134\001\002\000\010\042" +
    "\127\045\101\046\077\001\002\000\032\017\034\020\052" +
    "\023\041\033\033\041\056\043\006\047\062\062\031\063" +
    "\036\064\045\065\064\066\055\001\002\000\050\004\uffbc" +
    "\006\uffbc\032\112\033\113\034\107\035\110\036\114\037" +
    "\111\040\115\042\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\001\002\000" +
    "\060\004\uffae\005\uffae\006\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\067\042\uffae\043" +
    "\070\044\uffae\045\uffae\046\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\060\071\001\002\000\052\004" +
    "\uffa9\005\uffa9\006\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\042\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\001\002\000\032\004\uffbd\006\uffbd\042\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\001\002\000\030\017\034\020\052\033\033\041" +
    "\056\042\104\043\006\062\031\063\036\064\045\065\064" +
    "\066\055\001\002\000\032\017\034\020\052\023\041\033" +
    "\033\041\056\043\006\047\062\062\031\063\036\064\045" +
    "\065\064\066\055\001\002\000\006\057\073\061\072\001" +
    "\002\000\052\004\uffa6\005\uffa6\006\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\042\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\001\002\000\004\041\074\001\002\000" +
    "\004\042\075\001\002\000\052\004\uffd4\005\uffd4\006\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\001\002\000\010\044" +
    "\100\045\101\046\077\001\002\000\032\017\034\020\052" +
    "\023\041\033\033\041\056\043\006\047\062\062\031\063" +
    "\036\064\045\065\064\066\055\001\002\000\052\004\uffa7" +
    "\005\uffa7\006\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\042\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\001" +
    "\002\000\032\017\034\020\052\023\041\033\033\041\056" +
    "\043\006\047\062\062\031\063\036\064\045\065\064\066" +
    "\055\001\002\000\016\004\uffc6\006\uffc6\042\uffc6\044\uffc6" +
    "\045\uffc6\046\077\001\002\000\016\004\uffc7\006\uffc7\042" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\052\004\uffc8" +
    "\005\uffc8\006\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\001" +
    "\002\000\006\004\124\042\123\001\002\000\024\004\uffca" +
    "\032\112\033\113\034\107\035\110\036\114\037\111\040" +
    "\115\042\uffca\001\002\000\026\017\034\020\052\033\033" +
    "\041\056\043\006\062\031\063\036\064\045\065\064\066" +
    "\055\001\002\000\026\017\034\020\052\033\033\041\056" +
    "\043\006\062\031\063\036\064\045\065\064\066\055\001" +
    "\002\000\052\004\uffb6\005\uffb6\006\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\001\002\000\026\017\034\020\052\033" +
    "\033\041\056\043\006\062\031\063\036\064\045\065\064" +
    "\066\055\001\002\000\026\017\034\020\052\033\033\041" +
    "\056\043\006\062\031\063\036\064\045\065\064\066\055" +
    "\001\002\000\026\017\034\020\052\033\033\041\056\043" +
    "\006\062\031\063\036\064\045\065\064\066\055\001\002" +
    "\000\052\004\uffb5\005\uffb5\006\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\001\002\000\052\004\uffb8\005\uffb8\006\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\111\040" +
    "\115\042\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\001\002\000\052\004" +
    "\uffbb\005\uffbb\006\uffbb\032\uffbb\033\uffbb\034\107\035\110" +
    "\036\114\037\111\040\115\042\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\052\004\uffb7\005\uffb7\006\uffb7\032\uffb7\033" +
    "\uffb7\034\107\035\110\036\114\037\111\040\115\042\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\001\002\000\052\004\uffb9\005\uffb9" +
    "\006\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\114\037" +
    "\111\040\115\042\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\001\002\000" +
    "\052\004\uffba\005\uffba\006\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\114\037\111\040\115\042\uffba\044\uffba\045" +
    "\uffba\046\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\001\002\000\052\004\uffc9\005\uffc9\006\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\042\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\001\002\000\026\017\034" +
    "\020\052\033\033\041\056\043\006\062\031\063\036\064" +
    "\045\065\064\066\055\001\002\000\024\004\uffcb\032\112" +
    "\033\113\034\107\035\110\036\114\037\111\040\115\042" +
    "\uffcb\001\002\000\016\004\uffc5\006\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\001\002\000\052\004\uffad\005\uffad\006" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\042\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\001\002\000\030" +
    "\017\034\020\052\023\041\033\033\041\056\043\006\062" +
    "\031\063\036\064\045\065\064\066\055\001\002\000\030" +
    "\017\034\020\052\023\041\033\033\041\056\043\006\062" +
    "\031\063\036\064\045\065\064\066\055\001\002\000\030" +
    "\017\034\020\052\023\041\033\033\041\056\043\006\062" +
    "\031\063\036\064\045\065\064\066\055\001\002\000\030" +
    "\017\034\020\052\023\041\033\033\041\056\043\006\062" +
    "\031\063\036\064\045\065\064\066\055\001\002\000\030" +
    "\017\034\020\052\023\041\033\033\041\056\043\006\062" +
    "\031\063\036\064\045\065\064\066\055\001\002\000\030" +
    "\017\034\020\052\023\041\033\033\041\056\043\006\062" +
    "\031\063\036\064\045\065\064\066\055\001\002\000\032" +
    "\004\uffc0\006\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\001\002" +
    "\000\032\004\uffbe\006\uffbe\042\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\001\002\000\032\004\uffc1\006\uffc1\042\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\001\002\000\032\004\uffbf\006\uffbf\042\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\001\002\000\032\004\uffc2\006\uffc2\042" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\133" +
    "\053\132\054\135\055\134\001\002\000\032\004\uffc3\006" +
    "\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3" +
    "\052\133\053\132\054\135\055\134\001\002\000\064\002" +
    "\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\033\ufffc\041\ufffc\043\ufffc\044\ufffc\056\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\001\002\000" +
    "\032\017\034\020\052\023\041\033\033\041\056\043\006" +
    "\047\062\062\031\063\036\064\045\065\064\066\055\001" +
    "\002\000\010\042\147\045\101\046\077\001\002\000\004" +
    "\043\150\001\002\000\004\015\151\001\002\000\026\017" +
    "\034\020\052\033\033\041\056\043\006\062\031\063\036" +
    "\064\045\065\064\066\055\001\002\000\010\015\151\016" +
    "\156\044\155\001\002\000\010\015\uffe0\016\uffe0\044\uffe0" +
    "\001\002\000\004\044\163\001\002\000\064\002\uffe3\007" +
    "\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\033\uffe3\041\uffe3\043\uffe3\044\uffe3\056\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\001\002\000\004\005" +
    "\160\001\002\000\010\015\uffe1\016\uffe1\044\uffe1\001\002" +
    "\000\054\007\004\010\025\012\027\013\035\014\053\017" +
    "\034\020\052\021\021\022\005\023\041\024\010\025\037" +
    "\033\033\041\056\043\006\056\047\062\031\063\036\064" +
    "\045\065\044\066\055\001\002\000\056\007\004\010\025" +
    "\012\027\013\035\014\053\017\034\020\052\021\021\022" +
    "\005\023\041\024\010\025\037\033\033\041\056\043\006" +
    "\044\uffde\056\047\062\031\063\036\064\045\065\044\066" +
    "\055\001\002\000\064\002\uffff\007\uffff\010\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\033\uffff\041\uffff" +
    "\043\uffff\044\uffff\056\uffff\062\uffff\063\uffff\064\uffff\065" +
    "\uffff\066\uffff\001\002\000\064\002\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\033\uffe2" +
    "\041\uffe2\043\uffe2\044\uffe2\056\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\001\002\000\022\005\165\032\112" +
    "\033\113\034\107\035\110\036\114\037\111\040\115\001" +
    "\002\000\054\007\004\010\025\012\027\013\035\014\053" +
    "\017\034\020\052\021\021\022\005\023\041\024\010\025" +
    "\037\033\033\041\056\043\006\056\047\062\031\063\036" +
    "\064\045\065\044\066\055\001\002\000\062\007\004\010" +
    "\025\012\027\013\035\014\053\015\uffdf\016\uffdf\017\034" +
    "\020\052\021\021\022\005\023\041\024\010\025\037\033" +
    "\033\041\056\043\006\044\uffdf\056\047\062\031\063\036" +
    "\064\045\065\044\066\055\001\002\000\004\002\001\001" +
    "\002\000\064\002\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\033\ufff7\041\ufff7\043\ufff7" +
    "\044\ufff7\056\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\001\002\000\010\006\uffcd\045\101\046\077\001\002" +
    "\000\032\017\034\020\052\023\041\033\033\041\056\043" +
    "\006\047\062\062\031\063\036\064\045\065\064\066\055" +
    "\001\002\000\032\017\034\020\052\023\041\033\033\041" +
    "\056\043\006\047\062\062\031\063\036\064\045\065\064" +
    "\066\055\001\002\000\010\044\175\045\101\046\077\001" +
    "\002\000\022\005\176\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\001\002\000\032\017\034\020" +
    "\052\023\041\033\033\041\056\043\006\047\062\062\031" +
    "\063\036\064\045\065\064\066\055\001\002\000\010\006" +
    "\uffea\045\101\046\077\001\002\000\010\006\uffeb\045\101" +
    "\046\077\001\002\000\004\041\202\001\002\000\006\042" +
    "\204\065\205\001\002\000\006\004\212\042\211\001\002" +
    "\000\004\043\206\001\002\000\006\004\uffcf\042\uffcf\001" +
    "\002\000\054\007\004\010\025\012\027\013\035\014\053" +
    "\017\034\020\052\021\021\022\005\023\041\024\010\025" +
    "\037\033\033\041\056\043\006\056\047\062\031\063\036" +
    "\064\045\065\044\066\055\001\002\000\056\007\004\010" +
    "\025\012\027\013\035\014\053\017\034\020\052\021\021" +
    "\022\005\023\041\024\010\025\037\033\033\041\056\043" +
    "\006\044\210\056\047\062\031\063\036\064\045\065\044" +
    "\066\055\001\002\000\112\002\uffd1\004\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\033\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\001\002\000\004\043\214\001\002\000\004\065\213\001" +
    "\002\000\006\004\uffd0\042\uffd0\001\002\000\054\007\004" +
    "\010\025\012\027\013\035\014\053\017\034\020\052\021" +
    "\021\022\005\023\041\024\010\025\037\033\033\041\056" +
    "\043\006\056\047\062\031\063\036\064\045\065\044\066" +
    "\055\001\002\000\056\007\004\010\025\012\027\013\035" +
    "\014\053\017\034\020\052\021\021\022\005\023\041\024" +
    "\010\025\037\033\033\041\056\043\006\044\216\056\047" +
    "\062\031\063\036\064\045\065\044\066\055\001\002\000" +
    "\112\002\uffd2\004\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\033\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000\064\002" +
    "\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\033\ufff9\041\ufff9\043\ufff9\044\ufff9\056\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\001\002\000" +
    "\026\017\034\020\052\033\033\041\056\043\006\062\031" +
    "\063\036\064\045\065\064\066\055\001\002\000\022\032" +
    "\112\033\113\034\107\035\110\036\114\037\111\040\115" +
    "\042\222\001\002\000\004\006\uffce\001\002\000\004\065" +
    "\225\001\002\000\004\006\226\001\002\000\004\005\172" +
    "\001\002\000\032\017\034\020\052\023\041\033\033\041" +
    "\056\043\006\047\062\062\031\063\036\064\045\065\064" +
    "\066\055\001\002\000\010\006\230\045\101\046\077\001" +
    "\002\000\006\037\232\040\233\001\002\000\004\042\234" +
    "\001\002\000\004\042\uffdd\001\002\000\004\042\uffdc\001" +
    "\002\000\004\043\235\001\002\000\054\007\004\010\025" +
    "\012\027\013\035\014\053\017\034\020\052\021\021\022" +
    "\005\023\041\024\010\025\037\033\033\041\056\043\006" +
    "\056\047\062\031\063\036\064\045\065\044\066\055\001" +
    "\002\000\056\007\004\010\025\012\027\013\035\014\053" +
    "\017\034\020\052\021\021\022\005\023\041\024\010\025" +
    "\037\033\033\041\056\043\006\044\237\056\047\062\031" +
    "\063\036\064\045\065\044\066\055\001\002\000\064\002" +
    "\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\033\uffdb\041\uffdb\043\uffdb\044\uffdb\056\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000" +
    "\052\004\uffb4\005\uffb4\006\uffb4\032\uffb4\033\uffb4\034\107" +
    "\035\110\036\114\037\111\040\115\042\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\001\002\000\064\002\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\033\ufff0\041" +
    "\ufff0\043\ufff0\044\ufff0\056\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\001\002\000\064\002\ufff4\007\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\033" +
    "\ufff4\041\ufff4\043\ufff4\044\ufff4\056\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\001\002\000\032\017\034\020" +
    "\052\023\041\033\033\041\056\043\006\047\062\062\031" +
    "\063\036\064\045\065\064\066\055\001\002\000\010\042" +
    "\245\045\101\046\077\001\002\000\004\043\246\001\002" +
    "\000\054\007\004\010\025\012\027\013\035\014\053\017" +
    "\034\020\052\021\021\022\005\023\041\024\010\025\037" +
    "\033\033\041\056\043\006\056\047\062\031\063\036\064" +
    "\045\065\044\066\055\001\002\000\056\007\004\010\025" +
    "\012\027\013\035\014\053\017\034\020\052\021\021\022" +
    "\005\023\041\024\010\025\037\033\033\041\056\043\006" +
    "\044\250\056\047\062\031\063\036\064\045\065\044\066" +
    "\055\001\002\000\064\002\uffda\007\uffda\010\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\033\uffda\041\uffda" +
    "\043\uffda\044\uffda\056\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\001\002\000\064\002\ufffd\007\ufffd\010\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\033\ufffd" +
    "\041\ufffd\043\ufffd\044\ufffd\056\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\001\002\000\032\017\034\020\052" +
    "\023\041\033\033\041\056\043\006\047\062\062\031\063" +
    "\036\064\045\065\064\066\055\001\002\000\010\042\254" +
    "\045\101\046\077\001\002\000\004\043\255\001\002\000" +
    "\054\007\004\010\025\012\027\013\035\014\053\017\034" +
    "\020\052\021\021\022\005\023\041\024\010\025\037\033" +
    "\033\041\056\043\006\056\047\062\031\063\036\064\045" +
    "\065\044\066\055\001\002\000\056\007\004\010\025\012" +
    "\027\013\035\014\053\017\034\020\052\021\021\022\005" +
    "\023\041\024\010\025\037\033\033\041\056\043\006\044" +
    "\257\056\047\062\031\063\036\064\045\065\044\066\055" +
    "\001\002\000\066\002\uffe6\007\uffe6\010\uffe6\011\260\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\033\uffe6\041" +
    "\uffe6\043\uffe6\044\uffe6\056\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\001\002\000\004\043\262\001\002\000" +
    "\064\002\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\033\uffe5\041\uffe5\043\uffe5\044\uffe5" +
    "\056\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\001" +
    "\002\000\054\007\004\010\025\012\027\013\035\014\053" +
    "\017\034\020\052\021\021\022\005\023\041\024\010\025" +
    "\037\033\033\041\056\043\006\056\047\062\031\063\036" +
    "\064\045\065\044\066\055\001\002\000\056\007\004\010" +
    "\025\012\027\013\035\014\053\017\034\020\052\021\021" +
    "\022\005\023\041\024\010\025\037\033\033\041\056\043" +
    "\006\044\264\056\047\062\031\063\036\064\045\065\044" +
    "\066\055\001\002\000\064\002\uffe4\007\uffe4\010\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\033\uffe4\041" +
    "\uffe4\043\uffe4\044\uffe4\056\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\066\uffe4\001\002\000\022\006\270\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\001\002" +
    "\000\022\006\267\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\001\002\000\064\002\uffee\007\uffee" +
    "\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\033\uffee\041\uffee\043\uffee\044\uffee\056\uffee\062\uffee\063" +
    "\uffee\064\uffee\065\uffee\066\uffee\001\002\000\064\002\uffef" +
    "\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\033\uffef\041\uffef\043\uffef\044\uffef\056\uffef\062" +
    "\uffef\063\uffef\064\uffef\065\uffef\066\uffef\001\002\000\064" +
    "\002\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\033\ufff8\041\ufff8\043\ufff8\044\ufff8\056" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\001\002" +
    "\000\064\002\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\033\ufffa\041\ufffa\043\ufffa\044" +
    "\ufffa\056\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\001\002\000\064\002\ufff6\007\ufff6\010\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\033\ufff6\041\ufff6\043" +
    "\ufff6\044\ufff6\056\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\001\002\000\064\002\ufff2\007\ufff2\010\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\033\ufff2\041" +
    "\ufff2\043\ufff2\044\ufff2\056\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\001\002\000\032\017\034\020\052\023" +
    "\041\033\033\041\056\043\006\047\062\062\031\063\036" +
    "\064\045\065\064\066\055\001\002\000\010\042\277\045" +
    "\101\046\077\001\002\000\004\006\uffd9\001\002\000\064" +
    "\002\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\033\ufffb\041\ufffb\043\ufffb\044\ufffb\056" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\001\002" +
    "\000\012\004\uffe7\044\uffe7\045\101\046\077\001\002\000" +
    "\006\004\304\044\303\001\002\000\052\004\uffd3\005\uffd3" +
    "\006\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\001\002\000" +
    "\032\017\034\020\052\023\041\033\033\041\056\043\006" +
    "\047\062\062\031\063\036\064\045\065\064\066\055\001" +
    "\002\000\012\004\uffe8\044\uffe8\045\101\046\077\001\002" +
    "\000\064\002\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\033\ufff1\041\ufff1\043\ufff1\044" +
    "\ufff1\056\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\001\002\000\010\005\310\006\uffed\043\311\001\002\000" +
    "\032\017\034\020\052\023\041\033\033\041\056\043\006" +
    "\047\062\062\031\063\036\064\045\065\064\066\055\001" +
    "\002\000\026\017\034\020\052\033\033\041\056\043\006" +
    "\062\031\063\036\064\045\065\064\066\055\001\002\000" +
    "\022\032\112\033\113\034\107\035\110\036\114\037\111" +
    "\040\115\044\313\001\002\000\004\006\uffe9\001\002\000" +
    "\010\006\uffec\045\101\046\077\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\056\002\050\003\023\004\022\011\025\012" +
    "\053\013\006\014\016\015\017\016\042\017\037\020\012" +
    "\021\013\023\015\027\021\030\045\031\011\032\041\033" +
    "\027\034\014\036\010\040\031\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\062\004\022\005" +
    "\057\006\300\007\301\016\042\033\064\034\065\040\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\023\004" +
    "\022\011\025\012\053\013\006\015\161\016\042\017\037" +
    "\020\012\021\013\023\015\027\021\030\045\031\011\032" +
    "\041\033\027\034\014\036\010\040\031\041\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\237\004\022\016\042" +
    "\033\064\040\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\062\004\022\005\057\006\170\016\042\033\064\034" +
    "\065\040\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\062\004\022\005\057\006\060" +
    "\016\042\033\064\034\065\040\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\062" +
    "\004\022\005\057\006\125\016\042\033\064\034\065\040" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\105\004\022\016" +
    "\042\033\064\037\104\040\056\001\001\000\022\003\062" +
    "\004\022\005\057\006\075\016\042\033\064\034\065\040" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\062\004\022\005\057\006\102\016\042" +
    "\033\064\034\065\040\056\001\001\000\002\001\001\000" +
    "\022\003\062\004\022\005\057\006\101\016\042\033\064" +
    "\034\065\040\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\121\004\022\016\042\033\064\040\056\001" +
    "\001\000\014\003\120\004\022\016\042\033\064\040\056" +
    "\001\001\000\002\001\001\000\014\003\117\004\022\016" +
    "\042\033\064\040\056\001\001\000\014\003\116\004\022" +
    "\016\042\033\064\040\056\001\001\000\014\003\115\004" +
    "\022\016\042\033\064\040\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\124\004\022\016\042\033\064\040\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\062\004\022\005\142\016\042\033\064\034\065\040" +
    "\056\001\001\000\020\003\062\004\022\005\141\016\042" +
    "\033\064\034\065\040\056\001\001\000\020\003\062\004" +
    "\022\005\140\016\042\033\064\034\065\040\056\001\001" +
    "\000\020\003\062\004\022\005\137\016\042\033\064\034" +
    "\065\040\056\001\001\000\020\003\062\004\022\005\136" +
    "\016\042\033\064\034\065\040\056\001\001\000\020\003" +
    "\062\004\022\005\135\016\042\033\064\034\065\040\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\062\004\022\005\057\006" +
    "\145\016\042\033\064\034\065\040\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\152\025\151\001" +
    "\001\000\014\003\163\004\022\016\042\033\064\040\056" +
    "\001\001\000\006\024\156\026\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\023\004\022\011\025\012" +
    "\053\013\006\014\160\015\017\016\042\017\037\020\012" +
    "\021\013\023\015\027\021\030\045\031\011\032\041\033" +
    "\027\034\014\036\010\040\031\041\047\001\001\000\052" +
    "\003\023\004\022\011\025\012\053\013\006\015\161\016" +
    "\042\017\037\020\012\021\013\023\015\027\021\030\045" +
    "\031\011\032\041\033\027\034\014\036\010\040\031\041" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\003\023\004\022\011\025\012\053\013" +
    "\006\014\165\015\017\016\042\017\037\020\012\021\013" +
    "\023\015\027\021\030\045\031\011\032\041\033\027\034" +
    "\014\036\010\040\031\041\047\001\001\000\052\003\023" +
    "\004\022\011\025\012\053\013\006\015\161\016\042\017" +
    "\037\020\012\021\013\023\015\027\021\030\045\031\011" +
    "\032\041\033\027\034\014\036\010\040\031\041\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\062\004\022\005\057\006\177\016\042\033" +
    "\064\034\065\040\056\001\001\000\022\003\062\004\022" +
    "\005\057\006\173\016\042\033\064\034\065\040\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\062" +
    "\004\022\005\057\006\176\016\042\033\064\034\065\040" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\023\004\022" +
    "\011\025\012\053\013\006\014\206\015\017\016\042\017" +
    "\037\020\012\021\013\023\015\027\021\030\045\031\011" +
    "\032\041\033\027\034\014\036\010\040\031\041\047\001" +
    "\001\000\052\003\023\004\022\011\025\012\053\013\006" +
    "\015\161\016\042\017\037\020\012\021\013\023\015\027" +
    "\021\030\045\031\011\032\041\033\027\034\014\036\010" +
    "\040\031\041\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\023" +
    "\004\022\011\025\012\053\013\006\014\214\015\017\016" +
    "\042\017\037\020\012\021\013\023\015\027\021\030\045" +
    "\031\011\032\041\033\027\034\014\036\010\040\031\041" +
    "\047\001\001\000\052\003\023\004\022\011\025\012\053" +
    "\013\006\015\161\016\042\017\037\020\012\021\013\023" +
    "\015\027\021\030\045\031\011\032\041\033\027\034\014" +
    "\036\010\040\031\041\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\220\004\022\016\042\033\064" +
    "\040\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\062\004\022\005\057\006\226\016\042\033" +
    "\064\034\065\040\056\001\001\000\002\001\001\000\004" +
    "\010\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\023\004\022" +
    "\011\025\012\053\013\006\014\235\015\017\016\042\017" +
    "\037\020\012\021\013\023\015\027\021\030\045\031\011" +
    "\032\041\033\027\034\014\036\010\040\031\041\047\001" +
    "\001\000\052\003\023\004\022\011\025\012\053\013\006" +
    "\015\161\016\042\017\037\020\012\021\013\023\015\027" +
    "\021\030\045\031\011\032\041\033\027\034\014\036\010" +
    "\040\031\041\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\062" +
    "\004\022\005\057\006\243\016\042\033\064\034\065\040" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\023\004\022\011\025\012\053\013\006\014\246\015" +
    "\017\016\042\017\037\020\012\021\013\023\015\027\021" +
    "\030\045\031\011\032\041\033\027\034\014\036\010\040" +
    "\031\041\047\001\001\000\052\003\023\004\022\011\025" +
    "\012\053\013\006\015\161\016\042\017\037\020\012\021" +
    "\013\023\015\027\021\030\045\031\011\032\041\033\027" +
    "\034\014\036\010\040\031\041\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\062\004\022\005\057" +
    "\006\252\016\042\033\064\034\065\040\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\023\004\022" +
    "\011\025\012\053\013\006\014\255\015\017\016\042\017" +
    "\037\020\012\021\013\023\015\027\021\030\045\031\011" +
    "\032\041\033\027\034\014\036\010\040\031\041\047\001" +
    "\001\000\052\003\023\004\022\011\025\012\053\013\006" +
    "\015\161\016\042\017\037\020\012\021\013\023\015\027" +
    "\021\030\045\031\011\032\041\033\027\034\014\036\010" +
    "\040\031\041\047\001\001\000\004\022\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\023\004\022" +
    "\011\025\012\053\013\006\014\262\015\017\016\042\017" +
    "\037\020\012\021\013\023\015\027\021\030\045\031\011" +
    "\032\041\033\027\034\014\036\010\040\031\041\047\001" +
    "\001\000\052\003\023\004\022\011\025\012\053\013\006" +
    "\015\161\016\042\017\037\020\012\021\013\023\015\027" +
    "\021\030\045\031\011\032\041\033\027\034\014\036\010" +
    "\040\031\041\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\062\004\022\005\057\006\275" +
    "\016\042\033\064\034\065\040\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\062\004" +
    "\022\005\057\006\304\016\042\033\064\034\065\040\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\062\004\022\005\057\006\313\016\042" +
    "\033\064\034\065\040\056\001\001\000\014\003\311\004" +
    "\022\016\042\033\064\040\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_js$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_js$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_js$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
	public nodo raiz;
    //** Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);
        control.agregarError(new error("SINTACTICO","lexema: " +s.value,s.left,s.right));
        //ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        //archivoA.lista_errores.add(denegado);
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);
        control.agregarError(new error("SINTACTICO","lexema: " +s.value,s.left,s.right));
       // ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        //archivoA.lista_errores.add(denegado);
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico_js$actions {





  private final Sintactico_js parser;

  /** Constructor */
  CUP$Sintactico_js$actions(Sintactico_js parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico_js$do_action(
    int                        CUP$Sintactico_js$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_js$parser,
    java.util.Stack            CUP$Sintactico_js$stack,
    int                        CUP$Sintactico_js$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_js$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_js$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // F ::= id punto conteo 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		RESULT=new nodo("CONTEO",new nodo("ID",a,aleft,aright));
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // F ::= id alla REL clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT= new nodo("ACCESO_VECTOR",a,b,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // F ::= CALLFUN 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // F ::= ATEXTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // F ::= VECTOR 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // F ::= FALSE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("FALSE",aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // F ::= TRUE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("TRUE",aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // F ::= apar REL cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT = a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // F ::= id 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("ID",a,aleft,aright); 
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // F ::= fechas 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("DATE",a.replaceAll("'",""),aleft,aright); 
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= tchar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("STRING",a.replaceAll("'",""),aleft,aright); 
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // F ::= tstring 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("STRING",a.replaceAll("\"",""),aleft,aright); 
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // F ::= numero 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("NUM",a,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= F 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= menos E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("UNARIO",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E decremento 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT = new nodo("--",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E aumento 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT = new nodo("++",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E mas E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("+",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E pot E 
            {
              nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo j = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo k = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("^",j,k);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E dividir E 
            {
              nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("/",h,i);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E por E 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo g = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("*",f,g);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E menos E 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("-",c,d);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT =a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= FUNCION 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT =a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP ::= OP menorigual OP 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("<=",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP ::= OP menor OP 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("<",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP ::= OP mayorigual OP 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo(">=",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP ::= OP mayor OP 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo(">",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP ::= OP noig OP 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("!=",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP ::= OP iigual OP 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("==",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // REL ::= OP 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("REL",4, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // REL ::= NOT REL 
            {
              nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("!",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("REL",4, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // REL ::= REL OR REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("||",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("REL",4, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // REL ::= REL AND REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT = new nodo("&&",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("REL",4, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CALLFUN ::= id apar cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		RESULT = new nodo("CALLFUN",a,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CALLFUN",30, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CALLFUN ::= id apar PARAMETROS cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT = new nodo("CALLFUN",a,b,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CALLFUN",30, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS ::= E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=new nodo("PARAMETROS",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETROS ::= PARAMETROS coma E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETORNAR ::= retornar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=new nodo("RETORNAR",aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("RETORNAR",31, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETORNAR ::= retornar REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=new nodo("RETORNAR",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("RETORNAR",31, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MENSAJE ::= mensaje apar E cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=new nodo("MENSAJE",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("MENSAJE",28, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_ID ::= id 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=new nodo("LISTA_ID",new nodo(a,aleft,aright));
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("LISTA_ID",27, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_ID ::= LISTA_ID coma id 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		a.add(new nodo(b,bleft,bright)); RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("LISTA_ID",27, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= funcion id apar cpar alla SENTENCIAS clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		nodo nuevo = new nodo("FUNCION",a,c,aleft,aright); RESULT=nuevo;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= funcion id apar LISTA_ID cpar alla SENTENCIAS clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		nodo nuevo = new nodo("FUNCION",a,b,aleft,aright); nuevo.add(c); RESULT=nuevo;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VECTOR ::= alla L_VALORES clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT= new nodo("VECTOR",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("VECTOR",12, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATEXTO ::= id punto aTexto apar cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).value;
		RESULT=new nodo("ATEXTO",new nodo("ID",a,aleft,aright));
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("ATEXTO",25, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CICLOS ::= WHILE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CICLOS",24, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CICLOS ::= FOR 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CICLOS",24, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CICLOS ::= CASE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CICLOS",24, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CICLOS ::= SI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CICLOS",24, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMPRIMIR ::= imprimir apar REL cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=new nodo("IMPRIMIR",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",23, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= mientras apar REL cpar alla SENTENCIAS clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT= new nodo("WHILE",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= para apar ASIGNAR ppt REL ppt AUMENTOS cpar alla SENTENCIAS clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-8)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		nodo nuevo = new nodo("FOR",a,b); nuevo.add(c);nuevo.add(d); RESULT= nuevo;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("FOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AUMENTOS ::= decremento 
            {
              nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo("DECREMENTO","--",bleft,bright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("AUMENTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AUMENTOS ::= aumento 
            {
              nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo("AUMENTO","++",bleft,bright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("AUMENTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFECTO ::= defecto dosp SENTENCIAS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=new nodo("DEFECTO",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("DEFECTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASO ::= caso E dosp SENTENCIAS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo("CASO",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_CASO ::= CASO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=new nodo("CASOS",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("LISTA_CASO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_CASO ::= LISTA_CASO CASO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("LISTA_CASO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASE ::= selecciona apar REL cpar alla LISTA_CASO DEFECTO clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		nodo nuevo = new nodo("CASE",a,b); nuevo.add(c); RESULT=nuevo;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASE ::= selecciona apar REL cpar alla LISTA_CASO clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT= new nodo("CASE",a,b);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELSE ::= sino alla SENTENCIAS clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT= new nodo("ELSE",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SI ::= si apar REL cpar alla SENTENCIAS clla ELSE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		nodo nuevo = new nodo("IF",a,b); nuevo.add(c); RESULT=nuevo;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SI",15, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SI ::= si apar REL cpar alla SENTENCIAS clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		nodo nuevo = new nodo("IF",a,b);  RESULT=nuevo;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SI",15, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_VALORES ::= REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo	("L_VALORES",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("L_VALORES",5, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_VALORES ::= L_VALORES coma REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("L_VALORES",5, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEC_VECTOR ::= dim id alla E clla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT= new nodo("DIMENSION",a,b,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("DEC_VECTOR",13, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG_VECTOR ::= id alla REL clla dosp REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		nodo nuevo= new nodo("ASIGNAR_VECTOR",a,b,aleft,aright); nuevo.add(c); RESULT=nuevo;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("ASIG_VECTOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNAR ::= id dosp REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo("ASIGNAR",a,b,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARAR_ASIG ::= dim id dosp REL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo("DECLARAR_ASIG",a,b,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("DECLARAR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARAR ::= dim id 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo("DECLARAR",a,aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("DECLARAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= E decremento ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		RESULT = new nodo("--",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= E aumento ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)).value;
		RESULT = new nodo("++",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CALLFUN ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= continuar ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT = new nodo("continuar",aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= MENSAJE ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FUNCION 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ATEXTO ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= CICLOS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IMPRIMIR ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= RETORNAR ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT= a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= detener ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT = new nodo("BREAK",aleft,aright);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DEC_VECTOR ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ASIG_VECTOR ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ASIGNAR ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARAR_ASIG ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARAR ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		RESULT= new nodo("SENTENCIAS",a);
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",10, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",10, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.peek()).value;
		nodo raizz= new nodo("JS",a);  parser.raiz=raizz;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          return CUP$Sintactico_js$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).right;
		nodo start_val = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_js$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.elementAt(CUP$Sintactico_js$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_js$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_js$parser.done_parsing();
          return CUP$Sintactico_js$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

