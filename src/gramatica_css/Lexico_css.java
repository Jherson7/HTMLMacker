/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package gramatica_css;

import java_cup.runtime.*;
import java.util.ArrayList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/gramatica_css/lexico_css.flex</tt>
 */
public class Lexico_css implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\23\1\60\1\57\1\57\22\0\1\57\1\0\1\3"+
    "\4\0\1\4\1\40\1\41\1\10\1\35\1\31\1\36\1\2\1\7"+
    "\12\1\1\27\1\32\1\0\1\30\3\0\1\46\1\56\1\11\1\45"+
    "\1\14\1\51\1\53\1\47\1\22\1\50\1\5\1\20\1\13\1\15"+
    "\1\12\1\26\1\43\1\44\1\25\1\16\1\17\1\54\1\5\1\52"+
    "\1\55\1\42\1\33\1\0\1\34\1\37\1\6\1\0\1\46\1\56"+
    "\1\11\1\45\1\14\1\51\1\53\1\47\1\22\1\50\1\5\1\20"+
    "\1\13\1\15\1\12\1\26\1\43\1\44\1\25\1\16\1\17\1\54"+
    "\1\5\1\52\1\55\1\42\12\0\1\60\113\0\1\5\37\0\1\5"+
    "\76\0\2\21\115\0\1\24\u1ea8\0\1\60\1\60\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\1\1\3\1\4\1\5\6\3"+
    "\1\1\1\3\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\7\3\1\1\2\0"+
    "\1\21\1\0\1\22\1\23\1\24\5\3\1\0\7\3"+
    "\1\0\1\25\1\3\1\25\1\26\1\27\1\30\7\3"+
    "\1\0\2\3\1\0\1\2\6\3\1\0\7\3\2\0"+
    "\4\3\1\0\1\3\1\0\5\3\1\0\2\3\1\0"+
    "\3\3\1\0\1\3\1\0\2\3\1\0\4\3\1\31"+
    "\3\3\2\0\4\3\1\0\1\3\1\0\3\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\1\3\1\32"+
    "\2\3\1\33\2\0\4\3\1\0\1\3\1\0\3\3"+
    "\2\34\1\35\1\0\1\3\1\36\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\1\37\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\1\40\2\0\4\3\1\0\1\3\1\0"+
    "\3\3\1\0\1\3\1\0\3\3\2\41\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\2\3\2\0\2\3"+
    "\1\42\1\3\1\0\1\3\1\0\2\3\1\43\2\44"+
    "\1\0\1\3\1\0\2\3\1\45\2\0\1\3\1\0"+
    "\1\3\2\46\1\3\2\0\2\3\1\0\1\3\2\47"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\1\50\1\51"+
    "\2\52\2\53\1\3\1\54\1\0\1\54\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\1\3\1\0\2\3\2\55"+
    "\1\0\1\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\56\1\0\1\3\2\57\1\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\3\1\60\1\0\1\60\1\0\1\3"+
    "\1\0\1\3\1\61\1\62\1\0\1\3\2\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\142\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\142\0\u0310\0\142\0\142\0\142\0\142\0\u0341"+
    "\0\u0372\0\142\0\142\0\142\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\304\0\142\0\365"+
    "\0\142\0\142\0\142\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\142\0\142\0\142\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u052b\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u0126\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u0126\0\u1a39\0\u1a6a"+
    "\0\u0126\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\142\0\u0126\0\u0126"+
    "\0\u1ce7\0\u1d18\0\u0126\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u0126\0\u1ed1\0\u1f02\0\u1f33\0\u1f64"+
    "\0\u1f95\0\u1fc6\0\u1ff7\0\u0126\0\u2028\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\142\0\u0126"+
    "\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1"+
    "\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u0126\0\u2617\0\u2648"+
    "\0\u2679\0\u26aa\0\u26db\0\u270c\0\u0126\0\142\0\u0126\0\u273d"+
    "\0\u276e\0\u279f\0\u27d0\0\u2801\0\u0126\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\142\0\u0126\0\u2927\0\u2958\0\u2989\0\u29ba"+
    "\0\u29eb\0\u2a1c\0\u2a4d\0\142\0\u0126\0\u2a7e\0\u2aaf\0\u2ae0"+
    "\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u0126\0\142\0\142\0\u0126"+
    "\0\142\0\u0126\0\u2bd5\0\142\0\u2c06\0\u0126\0\u2c37\0\u2c68"+
    "\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0"+
    "\0\u2e21\0\142\0\u0126\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16"+
    "\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u0126\0\u300b\0\u303c\0\142"+
    "\0\u0126\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193"+
    "\0\u31c4\0\u31f5\0\142\0\u3226\0\u0126\0\u3257\0\u3288\0\u32b9"+
    "\0\u32ea\0\u0126\0\142\0\u331b\0\u334c\0\142\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\7"+
    "\1\17\1\20\1\21\1\22\1\3\2\7\1\23\1\3"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\3\7\1\35\1\36\1\7\1\37\1\40\1\7"+
    "\1\41\1\42\1\7\1\43\1\22\1\0\11\3\1\44"+
    "\11\3\1\22\33\3\1\22\63\0\1\4\1\45\56\0"+
    "\3\46\1\47\55\46\4\50\1\51\54\50\1\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\11\0\1\52\1\53\51\0\1\7\3\0"+
    "\2\7\2\0\1\7\1\54\1\7\1\55\2\7\1\56"+
    "\1\7\1\0\1\7\2\0\2\7\13\0\4\7\1\57"+
    "\10\7\3\0\1\7\3\0\2\7\2\0\10\7\1\0"+
    "\1\7\2\0\1\7\1\60\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\61\1\62\2\0\2\7"+
    "\13\0\4\7\1\63\10\7\3\0\1\7\3\0\2\7"+
    "\2\0\3\7\1\64\4\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\3\7"+
    "\1\65\4\7\1\0\1\7\2\0\2\7\13\0\2\7"+
    "\1\66\1\7\1\67\10\7\3\0\1\7\3\0\2\7"+
    "\2\0\3\7\1\70\4\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\44\0\1\71\2\0\1\72\14\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\1\73\2\7\1\74\11\7\32\0\1\75\65\0"+
    "\1\76\61\0\1\77\23\0\1\7\3\0\2\7\2\0"+
    "\3\7\1\100\4\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\6\7\1\101"+
    "\1\102\1\0\1\7\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\6\7\1\103\1\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\3\0\1\7\3\0"+
    "\2\7\2\0\1\7\1\104\6\7\1\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\105\10\7\3\0\1\7\3\0"+
    "\2\7\2\0\10\7\1\0\1\7\2\0\2\7\13\0"+
    "\2\7\1\106\12\7\3\0\1\7\3\0\2\7\2\0"+
    "\10\7\1\107\1\110\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\1\7\1\111\6\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\14\0\1\112\47\0"+
    "\1\113\60\0\1\7\3\0\2\7\2\0\2\7\1\114"+
    "\4\7\1\115\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\4\7\1\116\3\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\2\7\1\117\12\7\3\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\1\7\1\120\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\10\7\1\0"+
    "\1\7\2\0\2\7\13\0\4\7\1\121\10\7\17\0"+
    "\1\122\44\0\1\7\3\0\2\7\2\0\4\7\1\123"+
    "\3\7\1\0\1\7\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\0\1\7\2\0"+
    "\2\7\13\0\13\7\1\124\1\7\3\0\1\7\3\0"+
    "\2\7\2\0\10\7\1\0\1\7\2\0\2\7\13\0"+
    "\11\7\1\125\3\7\3\0\1\7\3\0\2\7\2\0"+
    "\10\7\1\0\1\7\2\0\2\7\13\0\10\7\1\126"+
    "\4\7\3\0\1\7\3\0\2\7\2\0\6\7\1\127"+
    "\1\7\1\0\1\7\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\2\7\1\130\5\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\3\0\1\7\3\0"+
    "\2\7\2\0\5\7\1\131\2\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\45\0\1\132\31\0\1\133\45\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\0\1\7\2\0"+
    "\2\7\13\0\1\7\1\134\13\7\3\0\1\7\3\0"+
    "\2\7\2\0\3\7\1\135\4\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\3\0\1\7\3\0\2\7\2\0"+
    "\10\7\1\0\1\7\2\0\2\7\13\0\2\7\1\136"+
    "\12\7\3\0\1\7\3\0\2\7\2\0\5\7\1\137"+
    "\2\7\1\0\1\7\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\140\1\141\2\0"+
    "\2\7\13\0\15\7\3\0\1\7\3\0\2\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\142\1\143\1\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\4\7\1\144"+
    "\3\7\1\0\1\7\2\0\2\7\13\0\2\7\1\145"+
    "\12\7\3\0\1\7\3\0\2\7\2\0\7\7\1\146"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\6\7\1\147\1\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\26\0\2\150\34\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\1\0\1\150"+
    "\1\151\1\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\2\7\13\0\2\7"+
    "\1\152\12\7\15\0\1\153\46\0\1\7\3\0\2\7"+
    "\2\0\3\7\1\154\4\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\1\7"+
    "\1\155\6\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\5\7\1\156\2\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\1\0\1\157"+
    "\1\160\1\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\161\1\162\2\0\2\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\10\7\1\0\1\7"+
    "\2\0\2\7\13\0\1\7\1\163\13\7\21\0\1\164"+
    "\42\0\1\7\3\0\2\7\2\0\6\7\1\165\1\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\6\7\1\166\1\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\2\7\13\0\2\7"+
    "\1\167\12\7\3\0\1\7\3\0\2\7\2\0\5\7"+
    "\1\170\2\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\3\7\1\171\4\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\3\7\1\172\1\7\1\173\2\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\2\7\1\174\12\7\21\0\1\175\61\0\1\176"+
    "\41\0\1\7\3\0\2\7\2\0\6\7\1\177\1\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\7\7\1\200\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\3\0\1\7\3\0\2\7\2\0"+
    "\3\7\1\201\4\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\1\7\1\202"+
    "\6\7\1\0\1\7\2\0\2\7\13\0\15\7\17\0"+
    "\1\203\44\0\1\7\3\0\2\7\2\0\4\7\1\204"+
    "\3\7\1\0\1\7\2\0\2\7\13\0\15\7\20\0"+
    "\1\205\43\0\1\7\3\0\2\7\2\0\5\7\1\206"+
    "\2\7\1\0\1\7\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\0\1\7\2\0"+
    "\2\7\13\0\3\7\1\207\11\7\3\0\1\7\3\0"+
    "\2\7\2\0\2\7\1\210\5\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\3\0\1\7\3\0\2\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\211\1\212\1\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\10\7\1\0"+
    "\1\7\2\0\1\7\1\213\13\0\15\7\23\0\2\214"+
    "\37\0\1\7\3\0\2\7\2\0\10\7\1\214\1\215"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\2\7\13\0\3\7"+
    "\1\216\11\7\16\0\1\217\45\0\1\7\3\0\2\7"+
    "\2\0\4\7\1\220\3\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\10\7"+
    "\1\0\1\7\2\0\2\7\13\0\2\7\1\221\12\7"+
    "\3\0\1\7\3\0\2\7\2\0\10\7\1\0\1\7"+
    "\2\0\2\7\13\0\2\7\1\222\12\7\23\0\2\223"+
    "\37\0\1\7\3\0\2\7\2\0\10\7\1\223\1\224"+
    "\2\0\2\7\13\0\15\7\20\0\1\225\43\0\1\7"+
    "\3\0\2\7\2\0\5\7\1\226\2\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\6\7\1\227\1\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\26\0\2\230\34\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\1\0\1\230\1\231\1\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\10\7"+
    "\1\0\1\7\1\0\1\232\1\233\1\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\10\7\1\234\1\235"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\1\7\1\236\6\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\7\7"+
    "\1\237\1\0\1\7\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\3\7\1\240\4\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\3\0\1\7\3\0"+
    "\2\7\2\0\10\7\1\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\241\10\7\23\0\2\242\52\0\1\243\45\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\242\1\244\2\0"+
    "\2\7\13\0\15\7\3\0\1\7\3\0\2\7\2\0"+
    "\3\7\1\245\4\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\1\246\7\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\2\7\1\247\12\7\16\0\1\250\45\0\1\7"+
    "\3\0\2\7\2\0\3\7\1\251\4\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\23\0\2\252\37\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\252\1\253\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\1\7"+
    "\1\254\6\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\10\7\1\0\1\7"+
    "\2\0\2\7\13\0\4\7\1\255\10\7\16\0\1\256"+
    "\45\0\1\7\3\0\2\7\2\0\3\7\1\257\4\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\1\7\1\260\6\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\60\0\1\261\3\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\14\7\1\262\3\0\1\7\3\0\2\7\2\0"+
    "\3\7\1\263\4\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\17\0\1\264\44\0\1\7\3\0\2\7\2\0"+
    "\5\7\1\265\2\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\5\7\1\266"+
    "\2\7\1\0\1\7\2\0\2\7\13\0\15\7\3\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\267\10\7\56\0\1\270\5\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\0\1\7\2\0"+
    "\2\7\13\0\12\7\1\271\2\7\50\0\1\272\13\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\0\1\7\2\0"+
    "\2\7\13\0\4\7\1\273\10\7\3\0\1\7\3\0"+
    "\2\7\2\0\3\7\1\274\4\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\13\0\1\275\50\0\1\7\3\0"+
    "\2\7\2\0\1\276\7\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\13\0\1\277\50\0\1\7\3\0\2\7"+
    "\2\0\1\300\7\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\22\0\1\301\41\0\1\7\3\0\2\7\2\0"+
    "\7\7\1\302\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\3\7\1\303\4\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\10\7\1\304\4\7\16\0\1\305\57\0\1\306"+
    "\46\0\1\7\3\0\2\7\2\0\3\7\1\307\4\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\2\7\1\310\5\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\2\7\13\0\5\7"+
    "\1\311\7\7\3\0\1\7\3\0\2\7\2\0\3\7"+
    "\1\312\4\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\50\0\1\313\13\0\1\7\3\0\2\7\2\0\10\7"+
    "\1\0\1\7\2\0\2\7\13\0\4\7\1\314\10\7"+
    "\53\0\1\315\10\0\1\7\3\0\2\7\2\0\10\7"+
    "\1\0\1\7\2\0\2\7\13\0\7\7\1\316\5\7"+
    "\3\0\1\7\3\0\2\7\2\0\3\7\1\317\4\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\5\7\1\320\2\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\22\0\1\321\41\0\1\7"+
    "\3\0\2\7\2\0\7\7\1\322\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\20\0\1\323\43\0\1\7\3\0"+
    "\1\7\1\324\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\3\7"+
    "\1\325\4\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\10\7\1\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\326\11\7\50\0\1\327"+
    "\13\0\1\7\3\0\2\7\2\0\10\7\1\0\1\7"+
    "\2\0\2\7\13\0\4\7\1\330\10\7\22\0\1\331"+
    "\41\0\1\7\3\0\2\7\2\0\7\7\1\332\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\21\0\1\333\42\0"+
    "\1\7\3\0\2\7\2\0\6\7\1\334\1\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\21\0\1\335\42\0"+
    "\1\7\3\0\2\7\2\0\6\7\1\336\1\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\22\0\1\337\41\0"+
    "\1\7\3\0\2\7\2\0\7\7\1\340\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\2\7\1\341\5\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\46\0\1\342\30\0\1\343\45\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\0\1\7\2\0\2\7"+
    "\13\0\2\7\1\344\12\7\3\0\1\7\3\0\2\7"+
    "\2\0\3\7\1\345\4\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\10\7"+
    "\1\0\1\7\2\0\2\7\13\0\4\7\1\346\10\7"+
    "\3\0\1\7\3\0\2\7\2\0\10\7\1\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\347\11\7\47\0\1\350"+
    "\14\0\1\7\3\0\2\7\2\0\10\7\1\0\1\7"+
    "\2\0\2\7\13\0\3\7\1\351\11\7\23\0\2\352"+
    "\37\0\1\7\3\0\2\7\2\0\10\7\1\352\1\353"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\7\7\1\354\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\1\7\1\355"+
    "\6\7\1\0\1\7\2\0\2\7\13\0\15\7\16\0"+
    "\1\356\45\0\1\7\3\0\2\7\2\0\3\7\1\357"+
    "\4\7\1\0\1\7\2\0\2\7\13\0\15\7\10\0"+
    "\1\360\53\0\1\7\3\0\2\7\2\0\2\7\1\361"+
    "\5\7\1\0\1\7\1\0\1\362\1\363\1\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\10\7\1\0"+
    "\1\7\2\0\2\7\13\0\10\7\1\364\4\7\3\0"+
    "\1\7\3\0\2\7\2\0\1\7\1\365\6\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\40\0\1\366\23\0"+
    "\1\7\3\0\2\7\2\0\10\7\1\0\1\7\2\0"+
    "\2\7\7\0\1\366\3\0\15\7\22\0\1\367\41\0"+
    "\1\7\3\0\2\7\2\0\7\7\1\370\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\22\0\1\371\41\0\1\7"+
    "\3\0\2\7\2\0\7\7\1\372\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\50\0\1\373\13\0\1\7\3\0"+
    "\2\7\2\0\10\7\1\0\1\7\2\0\2\7\13\0"+
    "\4\7\1\374\10\7\3\0\1\7\3\0\2\7\2\0"+
    "\3\7\1\375\4\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\47\0\1\376\30\0\1\377\44\0\1\7\3\0"+
    "\2\7\2\0\10\7\1\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u0100\11\7\3\0\1\7\3\0\2\7\2\0"+
    "\4\7\1\u0101\3\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\10\7\1\u0102"+
    "\1\u0103\2\0\2\7\13\0\15\7\14\0\1\u0104\47\0"+
    "\1\7\3\0\2\7\2\0\1\7\1\u0105\6\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\13\0\1\u0106\50\0"+
    "\1\7\3\0\2\7\2\0\1\u0107\7\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\3\0\1\7\3\0\2\7"+
    "\2\0\3\7\1\u0108\4\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\15\0\1\u0109\10\0\2\362\34\0\1\7"+
    "\3\0\2\7\2\0\6\7\1\u010a\1\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\23\0\2\u010b\37\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\u010b\1\u010c\2\0\2\7"+
    "\13\0\15\7\3\0\1\7\3\0\2\7\2\0\5\7"+
    "\1\u010d\2\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\20\0\1\u010e\110\0\1\u010f\13\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\2\7\13\0\4\7"+
    "\1\u0110\10\7\50\0\1\u0111\13\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\2\7\13\0\4\7"+
    "\1\u0112\10\7\3\0\1\7\3\0\2\7\2\0\4\7"+
    "\1\u0113\3\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\50\0\1\u0114\30\0\1\u0115\43\0\1\7\3\0\2\7"+
    "\2\0\10\7\1\0\1\7\2\0\2\7\13\0\4\7"+
    "\1\u0116\10\7\3\0\1\7\3\0\2\7\2\0\5\7"+
    "\1\u0117\2\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\15\0\1\u0118\46\0\1\7\3\0\2\7\2\0\2\7"+
    "\1\u0119\5\7\1\0\1\7\2\0\2\7\13\0\15\7"+
    "\50\0\1\u011a\13\0\1\7\3\0\2\7\2\0\10\7"+
    "\1\0\1\7\2\0\2\7\13\0\4\7\1\u011b\10\7"+
    "\3\0\1\7\3\0\2\7\2\0\2\7\1\u011c\5\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\21\0\1\u011d"+
    "\42\0\1\7\3\0\2\7\2\0\7\7\1\u011e\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\15\0\1\u011f\46\0"+
    "\1\7\3\0\2\7\2\0\2\7\1\u0120\5\7\1\0"+
    "\1\7\2\0\2\7\13\0\15\7\3\0\1\7\3\0"+
    "\2\7\2\0\5\7\1\u0121\2\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\14\0\1\u0122\47\0\1\7\3\0"+
    "\2\7\2\0\1\7\1\u0123\6\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\16\0\1\u0124\45\0\1\7\3\0"+
    "\2\7\2\0\3\7\1\u0125\4\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\47\0\1\u0126\14\0\1\7\3\0"+
    "\2\7\2\0\10\7\1\0\1\7\2\0\2\7\13\0"+
    "\3\7\1\u0127\11\7\3\0\1\7\3\0\2\7\2\0"+
    "\3\7\1\u0128\4\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\22\0\1\u0129\41\0\1\7\3\0\2\7\2\0"+
    "\5\7\1\u012a\2\7\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\30\0\1\u012b\33\0\1\7\3\0\2\7\2\0"+
    "\10\7\1\0\1\7\2\0\1\7\1\u012c\13\0\15\7"+
    "\3\0\1\7\3\0\2\7\2\0\1\7\1\u012d\6\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\17\0\1\u012e"+
    "\44\0\1\7\3\0\2\7\2\0\4\7\1\u012f\3\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\14\0\1\u0130"+
    "\47\0\1\7\3\0\2\7\2\0\1\7\1\u0131\6\7"+
    "\1\0\1\7\2\0\2\7\13\0\15\7\3\0\1\7"+
    "\3\0\2\7\2\0\4\7\1\u0132\3\7\1\0\1\7"+
    "\2\0\2\7\13\0\15\7\20\0\1\u0133\43\0\1\7"+
    "\3\0\2\7\2\0\10\7\1\u0134\1\u0135\2\0\2\7"+
    "\13\0\15\7\22\0\1\u0136\41\0\1\7\3\0\2\7"+
    "\2\0\7\7\1\u0137\1\0\1\7\2\0\2\7\13\0"+
    "\15\7\26\0\2\u0138\34\0\1\7\3\0\2\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\u0138\1\u0139\1\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\5\7\1\u013a"+
    "\2\7\1\0\1\7\2\0\2\7\13\0\15\7\23\0"+
    "\2\u0134\36\0\7\u013b\1\0\1\u013c\51\u013b\1\u013d\3\u013b"+
    "\2\u013d\1\0\1\u013c\10\u013d\1\u013b\1\u013d\2\u013b\2\u013d"+
    "\13\u013b\15\u013d\2\u013b\14\0\1\u013e\45\0\1\7\3\0"+
    "\2\7\2\0\3\7\1\u013f\4\7\1\0\1\7\2\0"+
    "\2\7\13\0\15\7\23\0\2\u0140\37\0\1\7\3\0"+
    "\2\7\2\0\10\7\1\u0140\1\u0141\2\0\2\7\13\0"+
    "\15\7\3\0\1\7\3\0\2\7\2\0\1\7\1\u0142"+
    "\6\7\1\0\1\7\2\0\2\7\13\0\15\7\11\0"+
    "\1\u0143\51\0\23\u013b\1\u0143\36\u013b\1\u013d\3\u013b\2\u013d"+
    "\2\u013b\10\u013d\1\u013b\1\u013d\1\u0143\1\u013b\2\u013d\13\u013b"+
    "\15\u013d\2\u013b\12\0\1\u0144\47\0\1\7\3\0\2\7"+
    "\2\0\1\7\1\u0145\6\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\17\0\1\u0146\44\0\1\7\3\0\2\7"+
    "\2\0\4\7\1\u0147\3\7\1\0\1\7\2\0\2\7"+
    "\13\0\15\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13181];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\10\1\1\11\1\1\4\11"+
    "\2\1\3\11\10\1\2\0\1\11\1\0\3\11\5\1"+
    "\1\0\7\1\1\0\3\1\3\11\7\1\1\0\2\1"+
    "\1\0\7\1\1\0\7\1\2\0\4\1\1\0\1\1"+
    "\1\0\5\1\1\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\10\1\2\0\4\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\2\0\4\1\1\0\1\1\1\0\3\1"+
    "\1\11\2\1\1\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\2\0\4\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\3\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\2\0\4\1\1\0\1\1"+
    "\1\0\3\1\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\2\0\1\1\1\0\1\1\1\11\2\1\2\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\2\11\1\1\1\11\2\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\2\1\2\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_css(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico_css(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error Lexico: "+yytext()+" ["+yyline+" , "+yycolumn+"]");
          }
        case 52: break;
        case 2: 
          { return new Symbol(Simbolos_css.numero, yycolumn, yyline, yytext());
          }
        case 53: break;
        case 3: 
          { return new Symbol(Simbolos_css.id, yycolumn, yyline, yytext());
          }
        case 54: break;
        case 4: 
          { return new Symbol(Simbolos_css.dividir, yycolumn, yyline, yytext());
          }
        case 55: break;
        case 5: 
          { return new Symbol(Simbolos_css.por, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 6: 
          { /* ignore white space. */
          }
        case 57: break;
        case 7: 
          { return new Symbol(Simbolos_css.dosp, yycolumn, yyline, yytext());
          }
        case 58: break;
        case 8: 
          { return new Symbol(Simbolos_css.coma, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 9: 
          { return new Symbol(Simbolos_css.ppt, yycolumn, yyline, yytext());
          }
        case 60: break;
        case 10: 
          { return new Symbol(Simbolos_css.cora, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 11: 
          { return new Symbol(Simbolos_css.corc, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 12: 
          { return new Symbol(Simbolos_css.mas, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 13: 
          { return new Symbol(Simbolos_css.menos, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 14: 
          { return new Symbol(Simbolos_css.pot, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 15: 
          { return new Symbol(Simbolos_css.apar, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 16: 
          { return new Symbol(Simbolos_css.cpar, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 17: 
          { return new Symbol(Simbolos_css.tstring, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 18: 
          { return new Symbol(Simbolos_css.tchar, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 19: 
          { yybegin(COMENT_SIMPLE);
          }
        case 70: break;
        case 20: 
          { yybegin(COMENT_MULTI);
          }
        case 71: break;
        case 21: 
          { return new Symbol(Simbolos_css.iden, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 22: 
          { return new Symbol(Simbolos_css.asig, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 23: 
          { return new Symbol(Simbolos_css.aumento, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 24: 
          { return new Symbol(Simbolos_css.decremento, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 25: 
          { return new Symbol(Simbolos_css.TRUE, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 26: 
          { return new Symbol(Simbolos_css.texto, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 27: 
          { return new Symbol(Simbolos_css.letra, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 28: 
          { return new Symbol(Simbolos_css.FALSE, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 29: 
          { return new Symbol(Simbolos_css.grupo, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 30: 
          { return new Symbol(Simbolos_css.Borde, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 31: 
          { return new Symbol(Simbolos_css.opaque, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 32: 
          { return new Symbol(Simbolos_css.TamTex, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 33: 
          { return new Symbol(Simbolos_css.Cursiva, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 34: 
          { return new Symbol(Simbolos_css.derecha, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 35: 
          { return new Symbol(Simbolos_css.formato, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 36: 
          { return new Symbol(Simbolos_css.Visible, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 37: 
          { return new Symbol(Simbolos_css.centrado, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 38: 
          { return new Symbol(Simbolos_css.negrilla, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 39: 
          { return new Symbol(Simbolos_css.alineado, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 40: 
          { return new Symbol(Simbolos_css.colortext, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 41: 
          { return new Symbol(Simbolos_css.capital, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 42: 
          { return new Symbol(Simbolos_css.Minuscula, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 43: 
          { return new Symbol(Simbolos_css.Mayuscula, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 44: 
          { return new Symbol(Simbolos_css.izquierda, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 45: 
          { return new Symbol(Simbolos_css.idElemento, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 46: 
          { return new Symbol(Simbolos_css.Tamelemento, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 47: 
          { return new Symbol(Simbolos_css.justificado, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 48: 
          { 
          }
        case 99: break;
        case 49: 
          { return new Symbol(Simbolos_css.FondoElemento, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 50: 
          { yybegin(YYINITIAL);
          }
        case 101: break;
        case 51: 
          { return new Symbol(Simbolos_css.resize, yycolumn, yyline, yytext());
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos_css.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
