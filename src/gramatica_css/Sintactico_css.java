
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 01 12:40:23 CST 2018
//----------------------------------------------------

package gramatica_css;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Arbol.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 01 12:40:23 CST 2018
  */
public class Sintactico_css extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico_css() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_css(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_css(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\004\011\000" +
    "\002\003\011\000\002\007\004\000\002\007\003\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\010\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\005\000\002\014\005\000\002\014\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\015\005\000\002" +
    "\016\005\000\002\017\005\000\002\021\005\000\002\024" +
    "\013\000\002\025\005\000\002\026\005\000\002\027\005" +
    "\000\002\030\011\000\002\031\005\000\002\032\006\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\005\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\045\010\046\005\060\013\001\002\000" +
    "\012\002\ufffc\045\ufffc\046\ufffc\060\ufffc\001\002\000\004" +
    "\021\205\001\002\000\012\002\000\045\010\046\005\060" +
    "\013\001\002\000\012\002\ufffb\045\ufffb\046\ufffb\060\ufffb" +
    "\001\002\000\004\021\174\001\002\000\004\002\173\001" +
    "\002\000\012\002\ufffa\045\ufffa\046\ufffa\060\ufffa\001\002" +
    "\000\004\010\014\001\002\000\032\027\016\032\030\036" +
    "\040\037\036\040\046\041\022\042\021\043\027\044\015" +
    "\047\041\053\034\054\017\001\002\000\004\004\171\001" +
    "\002\000\004\004\167\001\002\000\004\004\165\001\002" +
    "\000\004\007\164\001\002\000\004\004\154\001\002\000" +
    "\004\004\152\001\002\000\034\011\ufff6\027\ufff6\032\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\047\ufff6\053\ufff6\054\ufff6\001\002\000\004\007\151" +
    "\001\002\000\034\011\150\027\016\032\030\036\040\037" +
    "\036\040\046\041\022\042\021\043\027\044\015\047\041" +
    "\053\034\054\017\001\002\000\004\007\146\001\002\000" +
    "\004\004\144\001\002\000\004\004\132\001\002\000\004" +
    "\007\131\001\002\000\004\007\130\001\002\000\004\007" +
    "\127\001\002\000\004\004\121\001\002\000\004\007\120" +
    "\001\002\000\004\004\116\001\002\000\004\007\115\001" +
    "\002\000\004\004\113\001\002\000\004\004\105\001\002" +
    "\000\004\007\104\001\002\000\004\007\103\001\002\000" +
    "\004\007\102\001\002\000\004\007\101\001\002\000\004" +
    "\004\047\001\002\000\022\013\053\021\052\051\051\052" +
    "\055\055\056\056\054\057\061\060\050\001\002\000\030" +
    "\005\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\001\002\000\030" +
    "\005\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3\001\002\000\022" +
    "\013\053\021\052\051\051\052\055\055\056\056\054\057" +
    "\061\060\050\001\002\000\022\013\053\021\052\051\051" +
    "\052\055\055\056\056\054\057\061\060\050\001\002\000" +
    "\030\005\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\022\uffc7\001\002\000" +
    "\030\005\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\001\002\000" +
    "\030\005\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8\001\002\000" +
    "\030\005\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\001\002\000" +
    "\022\007\uffda\012\065\013\066\014\062\015\063\016\067" +
    "\017\064\020\070\001\002\000\030\005\uffc6\007\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\022\uffc6\001\002\000\022\013\053\021\052\051" +
    "\051\052\055\055\056\056\054\057\061\060\050\001\002" +
    "\000\022\013\053\021\052\051\051\052\055\055\056\056" +
    "\054\057\061\060\050\001\002\000\030\005\uffcc\007\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\022\uffcc\001\002\000\022\013\053\021\052" +
    "\051\051\052\055\055\056\056\054\057\061\060\050\001" +
    "\002\000\022\013\053\021\052\051\051\052\055\055\056" +
    "\056\054\057\061\060\050\001\002\000\022\013\053\021" +
    "\052\051\051\052\055\055\056\056\054\057\061\060\050" +
    "\001\002\000\030\005\uffcb\007\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb" +
    "\001\002\000\030\005\uffce\007\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\064\020\070\022\uffce" +
    "\001\002\000\030\005\uffd1\007\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\062\015\063\016\067\017\064\020\070\022\uffd1" +
    "\001\002\000\030\005\uffcd\007\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\062\015\063\016\067\017\064\020\070\022\uffcd" +
    "\001\002\000\030\005\uffcf\007\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\067\017\064\020\070\022\uffcf" +
    "\001\002\000\030\005\uffd0\007\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\067\017\064\020\070\022\uffd0" +
    "\001\002\000\030\005\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\062\015\063\016\067\017\064\020\070\022\uffca" +
    "\001\002\000\022\012\065\013\066\014\062\015\063\016" +
    "\067\017\064\020\070\022\100\001\002\000\030\005\uffc4" +
    "\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\022\uffc4\001\002\000\034\011\ufff1" +
    "\027\ufff1\032\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\047\ufff1\053\ufff1\054\ufff1\001\002" +
    "\000\034\011\uffed\027\uffed\032\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\047\uffed\053\uffed" +
    "\054\uffed\001\002\000\034\011\ufff4\027\ufff4\032\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\047\ufff4\053\ufff4\054\ufff4\001\002\000\034\011\uffeb\027" +
    "\uffeb\032\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\047\uffeb\053\uffeb\054\uffeb\001\002\000" +
    "\012\023\110\024\106\025\112\026\111\001\002\000\004" +
    "\007\uffe7\001\002\000\004\007\uffe9\001\002\000\004\007" +
    "\uffe8\001\002\000\004\007\uffe5\001\002\000\004\007\uffe6" +
    "\001\002\000\022\013\053\021\052\051\051\052\055\055" +
    "\056\056\054\057\061\060\050\001\002\000\022\007\uffdc" +
    "\012\065\013\066\014\062\015\063\016\067\017\064\020" +
    "\070\001\002\000\034\011\ufff0\027\ufff0\032\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\047" +
    "\ufff0\053\ufff0\054\ufff0\001\002\000\022\013\053\021\052" +
    "\051\051\052\055\055\056\056\054\057\061\060\050\001" +
    "\002\000\022\007\uffdb\012\065\013\066\014\062\015\063" +
    "\016\067\017\064\020\070\001\002\000\034\011\uffef\027" +
    "\uffef\032\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\047\uffef\053\uffef\054\uffef\001\002\000" +
    "\004\010\122\001\002\000\022\013\053\021\052\051\051" +
    "\052\055\055\056\056\054\057\061\060\050\001\002\000" +
    "\022\005\124\012\065\013\066\014\062\015\063\016\067" +
    "\017\064\020\070\001\002\000\022\013\053\021\052\051" +
    "\051\052\055\055\056\056\054\057\061\060\050\001\002" +
    "\000\022\011\126\012\065\013\066\014\062\015\063\016" +
    "\067\017\064\020\070\001\002\000\004\007\uffd4\001\002" +
    "\000\034\011\uffee\027\uffee\032\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\047\uffee\053\uffee" +
    "\054\uffee\001\002\000\034\011\ufff3\027\ufff3\032\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\047\ufff3\053\ufff3\054\ufff3\001\002\000\034\011\ufff5\027" +
    "\ufff5\032\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\047\ufff5\053\ufff5\054\ufff5\001\002\000" +
    "\014\030\134\031\133\033\137\034\136\035\140\001\002" +
    "\000\006\005\uffdd\007\uffdd\001\002\000\006\005\uffe1\007" +
    "\uffe1\001\002\000\006\005\uffe2\007\uffe2\001\002\000\006" +
    "\005\uffdf\007\uffdf\001\002\000\006\005\uffe0\007\uffe0\001" +
    "\002\000\006\005\uffde\007\uffde\001\002\000\006\005\142" +
    "\007\uffe4\001\002\000\014\030\134\031\133\033\137\034" +
    "\136\035\140\001\002\000\006\005\uffe3\007\uffe3\001\002" +
    "\000\022\013\053\021\052\051\051\052\055\055\056\056" +
    "\054\057\061\060\050\001\002\000\022\007\uffd7\012\065" +
    "\013\066\014\062\015\063\016\067\017\064\020\070\001" +
    "\002\000\034\011\uffec\027\uffec\032\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\047\uffec\053" +
    "\uffec\054\uffec\001\002\000\034\011\ufff7\027\ufff7\032\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\047\ufff7\053\ufff7\054\ufff7\001\002\000\012\002\uffd2" +
    "\045\uffd2\046\uffd2\060\uffd2\001\002\000\034\011\uffea\027" +
    "\uffea\032\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\047\uffea\053\uffea\054\uffea\001\002\000" +
    "\022\013\053\021\052\051\051\052\055\055\056\056\054" +
    "\057\061\060\050\001\002\000\022\007\uffd9\012\065\013" +
    "\066\014\062\015\063\016\067\017\064\020\070\001\002" +
    "\000\004\010\155\001\002\000\022\013\053\021\052\051" +
    "\051\052\055\055\056\056\054\057\061\060\050\001\002" +
    "\000\022\005\157\012\065\013\066\014\062\015\063\016" +
    "\067\017\064\020\070\001\002\000\022\013\053\021\052" +
    "\051\051\052\055\055\056\056\054\057\061\060\050\001" +
    "\002\000\022\005\161\012\065\013\066\014\062\015\063" +
    "\016\067\017\064\020\070\001\002\000\022\013\053\021" +
    "\052\051\051\052\055\055\056\056\054\057\061\060\050" +
    "\001\002\000\022\011\163\012\065\013\066\014\062\015" +
    "\063\016\067\017\064\020\070\001\002\000\004\007\uffd8" +
    "\001\002\000\034\011\ufff2\027\ufff2\032\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2" +
    "\053\ufff2\054\ufff2\001\002\000\022\013\053\021\052\051" +
    "\051\052\055\055\056\056\054\057\061\060\050\001\002" +
    "\000\022\007\uffd3\012\065\013\066\014\062\015\063\016" +
    "\067\017\064\020\070\001\002\000\022\013\053\021\052" +
    "\051\051\052\055\055\056\056\054\057\061\060\050\001" +
    "\002\000\022\007\uffd5\012\065\013\066\014\062\015\063" +
    "\016\067\017\064\020\070\001\002\000\022\013\053\021" +
    "\052\051\051\052\055\055\056\056\054\057\061\060\050" +
    "\001\002\000\022\007\uffd6\012\065\013\066\014\062\015" +
    "\063\016\067\017\064\020\070\001\002\000\004\002\001" +
    "\001\002\000\004\060\175\001\002\000\004\022\176\001" +
    "\002\000\004\010\177\001\002\000\032\027\016\032\030" +
    "\036\040\037\036\040\046\041\022\042\021\043\027\044" +
    "\015\047\041\053\034\054\017\001\002\000\034\011\201" +
    "\027\016\032\030\036\040\037\036\040\046\041\022\042" +
    "\021\043\027\044\015\047\041\053\034\054\017\001\002" +
    "\000\012\002\ufff9\045\ufff9\046\ufff9\060\ufff9\001\002\000" +
    "\012\002\uffff\045\uffff\046\uffff\060\uffff\001\002\000\012" +
    "\002\ufffe\045\ufffe\046\ufffe\060\ufffe\001\002\000\012\002" +
    "\ufffd\045\ufffd\046\ufffd\060\ufffd\001\002\000\004\060\206" +
    "\001\002\000\004\022\207\001\002\000\004\010\210\001" +
    "\002\000\032\027\016\032\030\036\040\037\036\040\046" +
    "\041\022\042\021\043\027\044\015\047\041\053\034\054" +
    "\017\001\002\000\034\011\212\027\016\032\030\036\040" +
    "\037\036\040\046\041\022\042\021\043\027\044\015\047" +
    "\041\053\034\054\017\001\002\000\012\002\ufff8\045\ufff8" +
    "\046\ufff8\060\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\014\002\010\003\003\004\006\005\005\032" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\201\004\202\032\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\022\007\024\010\030\012\031\015" +
    "\017\016\044\017\036\021\034\024\032\025\043\026\025" +
    "\027\042\030\041\031\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\146\010\030\012\031\015\017\016\044" +
    "\017\036\021\034\024\032\025\043\026\025\027\042\030" +
    "\041\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\057\023" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\076\023\056\001\001\000\006\022\075\023\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\074\023\056\001\001\000\006\022\073\023\056" +
    "\001\001\000\002\001\001\000\006\022\072\023\056\001" +
    "\001\000\006\022\071\023\056\001\001\000\006\022\070" +
    "\023\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\113\023\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\116\023\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\122\023\056\001\001\000\002\001\001" +
    "\000\006\022\124\023\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\134\014\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\142\001\001\000\002\001\001\000\006\022\144" +
    "\023\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\152\023\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\155\023\056\001\001\000\002\001\001" +
    "\000\006\022\157\023\056\001\001\000\002\001\001\000" +
    "\006\022\161\023\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\165\023\056\001" +
    "\001\000\002\001\001\000\006\022\167\023\056\001\001" +
    "\000\002\001\001\000\006\022\171\023\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\022\007\177\010" +
    "\030\012\031\015\017\016\044\017\036\021\034\024\032" +
    "\025\043\026\025\027\042\030\041\031\023\001\001\000" +
    "\034\006\146\010\030\012\031\015\017\016\044\017\036" +
    "\021\034\024\032\025\043\026\025\027\042\030\041\031" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\022\007\210\010\030" +
    "\012\031\015\017\016\044\017\036\021\034\024\032\025" +
    "\043\026\025\027\042\030\041\031\023\001\001\000\034" +
    "\006\146\010\030\012\031\015\017\016\044\017\036\021" +
    "\034\024\032\025\043\026\025\027\042\030\041\031\023" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_css$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_css$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_css$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    //public Archivo archivoA;
    public nodo raiz;
    //** Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);
        //ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        //archivoA.lista_errores.add(denegado);
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);
       // ErrorT denegado = new ErrorT(s.value.toString(), s.right,s.left,"ERROR SINTACTICO" ,"Lexema Invalido");
        //archivoA.lista_errores.add(denegado);
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico_css$actions {



    
   // public ArrayList<Token> lista_reservadasB = new ArrayList<>();
   // public void guardarReservada(String valor, int linea, int columna, String descripcion)
   // {
    //    lista_reservadasB.add(new Token(valor, linea, columna, descripcion));
  // }

  private final Sintactico_css parser;

  /** Constructor */
  CUP$Sintactico_css$actions(Sintactico_css parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico_css$do_action(
    int                        CUP$Sintactico_css$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_css$parser,
    java.util.Stack            CUP$Sintactico_css$stack,
    int                        CUP$Sintactico_css$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_css$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_css$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= FALSE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("FALSE",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("F",17, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // F ::= TRUE 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("TRUE",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("F",17, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // F ::= apar E cpar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT = a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("F",17, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // F ::= id 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("ID",a,aleft,aright); 
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("F",17, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // F ::= tchar 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("STRING",a.replaceAll("'",""),aleft,aright); 
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("F",17, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // F ::= tstring 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("STRING",a.replaceAll("\"",""),aleft,aright); 
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("F",17, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // F ::= numero 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("NUM",a,aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("F",17, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= F 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= menos E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("UNARIO",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E decremento 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT = new nodo("--",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E aumento 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT = new nodo("++",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E mas E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("+",a,b);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E pot E 
            {
              nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).right;
		nodo j = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo k = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("^",j,k);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E dividir E 
            {
              nodo RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("/",h,i);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E por E 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo g = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("*",f,g);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E menos E 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = new nodo("-",c,d);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO ::= id cora SENTENCIAS corc 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= new nodo("ELEMENTO",a,b,aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("ELEMENTO",24, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IDELEMENT ::= idElemento asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("IDELEMENT",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("IDELEMENT",23, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TAMELEMENTO ::= Tamelemento asig cora E coma E corc 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= new nodo("TAMELEMENTO",a,b);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TAMELEMENTO",22, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTO ::= texto asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("TEXTO",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TEXTO",21, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COLOR ::= colortext asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("COLOR",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("COLOR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPACO ::= opaque asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("OPACO",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("OPACO",19, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BORDE ::= Borde asig cora E coma E coma E corc 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-5)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		nodo nuevo = new nodo("BORDE",a,b); nuevo.add(c); RESULT= nuevo;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("BORDE",18, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VISIBILIDAD ::= Visible asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("VISIBILIDAD",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",15, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FONDO ::= FondoElemento asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("FONDO",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("FONDO",13, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TAMTEX ::= TamTex asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("TAMTEX",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TAMTEX",12, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LETRA ::= letra asig E 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("LETRA",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LETRA",11, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_FOR ::= Cursiva 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("cursiva",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_FOR ::= capital 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("capital",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_FOR ::= Minuscula 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("minuscula",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_FOR ::= Mayuscula 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("mayuscula",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_FOR ::= negrilla 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("negrilla",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_FORMATO ::= TIPO_FOR 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("FORMATO",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA_FORMATO",10, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_FORMATO ::= LISTA_FORMATO coma TIPO_FOR 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		a.add(b); RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA_FORMATO",10, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMATO ::= formato asig LISTA_FORMATO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("FORMATO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_ALIN ::= justificado 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("ALINEADO","justificado",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_ALIN",7, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_ALIN ::= centrado 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("ALINEADO","centrado",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_ALIN",7, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_ALIN ::= derecha 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("ALINEADO","derecha",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_ALIN",7, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_ALIN ::= izquierda 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("ALINEADO","izquierda",aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("TIPO_ALIN",7, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ALIENADO ::= alineado asig TIPO_ALIN 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("ALIENADO",6, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IDELEMENT ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= TAMELEMENTO ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= COLOR ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= OPACO ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= BORDE ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= VISIBILIDAD ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FONDO ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= TAMTEX ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= LETRA ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FORMATO ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= TEXTO ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ALIENADO ppt 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= SENTENCIA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("SENTENCIAS",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ID ::= iden apar id cpar cora SENTENCIAS corc 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= new nodo("IDEN",a,b,aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("ID",1, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GRUPO ::= grupo apar id cpar cora SENTENCIAS corc 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT= new nodo("GRUPO",a,b,aleft,aright);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("GRUPO",2, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA ::= ELEMENTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("LISTA_CSS",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA ::= GRUPO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("LISTA_CSS",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA ::= ID 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		RESULT= new nodo("LISTA_CSS",a);
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA ::= LISTA ELEMENTO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA ::= LISTA GRUPO 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA ::= LISTA ID 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		a.add(b); RESULT=a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.peek()).value;
		parser.raiz=a;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          return CUP$Sintactico_css$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).right;
		nodo start_val = (nodo)((java_cup.runtime.Symbol) CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_css$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.elementAt(CUP$Sintactico_css$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_css$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_css$parser.done_parsing();
          return CUP$Sintactico_css$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

